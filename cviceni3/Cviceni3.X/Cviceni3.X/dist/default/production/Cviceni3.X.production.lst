

Microchip MPLAB XC8 Assembler V3.10 build 20250813170317 
                                                                                               Wed Oct  8 15:14:17 2025

Microchip MPLAB XC8 C Compiler v3.10 (Free license) build 20250813170317 Og1 
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18   000000                     
    19                           ; Generated 09/02/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F47K40 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53   000FE0                     bsr             equ	4064
    54   000FE9                     fsr0            equ	4073
    55   000FEA                     fsr0h           equ	4074
    56   000FE9                     fsr0l           equ	4073
    57   000FE1                     fsr1            equ	4065
    58   000FE2                     fsr1h           equ	4066
    59   000FE1                     fsr1l           equ	4065
    60   000FD9                     fsr2            equ	4057
    61   000FDA                     fsr2h           equ	4058
    62   000FD9                     fsr2l           equ	4057
    63   000FEF                     indf0           equ	4079
    64   000FE7                     indf1           equ	4071
    65   000FDF                     indf2           equ	4063
    66   000FF2                     intcon          equ	4082
    67   000F81                     nvmcon          equ	3969
    68   000FF9                     pcl             equ	4089
    69   000FFA                     pclath          equ	4090
    70   000FFB                     pclatu          equ	4091
    71   000FEB                     plusw0          equ	4075
    72   000FE3                     plusw1          equ	4067
    73   000FDB                     plusw2          equ	4059
    74   000FED                     postdec0        equ	4077
    75   000FE5                     postdec1        equ	4069
    76   000FDD                     postdec2        equ	4061
    77   000FEE                     postinc0        equ	4078
    78   000FE6                     postinc1        equ	4070
    79   000FDE                     postinc2        equ	4062
    80   000FEC                     preinc0         equ	4076
    81   000FE4                     preinc1         equ	4068
    82   000FDC                     preinc2         equ	4060
    83   000FF3                     prod            equ	4083
    84   000FF4                     prodh           equ	4084
    85   000FF3                     prodl           equ	4083
    86   000FD8                     status          equ	4056
    87   000FF5                     tablat          equ	4085
    88   000FF6                     tblptr          equ	4086
    89   000FF7                     tblptrh         equ	4087
    90   000FF6                     tblptrl         equ	4086
    91   000FF8                     tblptru         equ	4088
    92   000FFD                     tosl            equ	4093
    93   000FE8                     wreg            equ	4072
    94   000E8D                     RX2PPS          equ	3725	;# 
    95   000E8E                     CK2PPS          equ	3726	;# 
    96   000E8E                     TX2PPS          equ	3726	;# 
    97   000E8F                     SSP2CLKPPS      equ	3727	;# 
    98   000E90                     SSP2DATPPS      equ	3728	;# 
    99   000E91                     SSP2SSPPS       equ	3729	;# 
   100   000E92                     SSP2BUF         equ	3730	;# 
   101   000E93                     SSP2ADD         equ	3731	;# 
   102   000E94                     SSP2MSK         equ	3732	;# 
   103   000E95                     SSP2STAT        equ	3733	;# 
   104   000E96                     SSP2CON1        equ	3734	;# 
   105   000E97                     SSP2CON2        equ	3735	;# 
   106   000E98                     SSP2CON3        equ	3736	;# 
   107   000E99                     RC2REG          equ	3737	;# 
   108   000E99                     RCREG2          equ	3737	;# 
   109   000E9A                     TX2REG          equ	3738	;# 
   110   000E9A                     TXREG2          equ	3738	;# 
   111   000E9B                     SP2BRG          equ	3739	;# 
   112   000E9B                     SP2BRGL         equ	3739	;# 
   113   000E9B                     SPBRG2          equ	3739	;# 
   114   000E9C                     SP2BRGH         equ	3740	;# 
   115   000E9C                     SPBRGH2         equ	3740	;# 
   116   000E9D                     RC2STA          equ	3741	;# 
   117   000E9D                     RCSTA2          equ	3741	;# 
   118   000E9E                     TX2STA          equ	3742	;# 
   119   000E9E                     TXSTA2          equ	3742	;# 
   120   000E9F                     BAUD2CON        equ	3743	;# 
   121   000E9F                     BAUDCON2        equ	3743	;# 
   122   000E9F                     BAUDCTL2        equ	3743	;# 
   123   000EA0                     PPSLOCK         equ	3744	;# 
   124   000EA1                     INT0PPS         equ	3745	;# 
   125   000EA2                     INT1PPS         equ	3746	;# 
   126   000EA3                     INT2PPS         equ	3747	;# 
   127   000EA4                     T0CKIPPS        equ	3748	;# 
   128   000EA5                     T1CKIPPS        equ	3749	;# 
   129   000EA6                     T1GPPS          equ	3750	;# 
   130   000EA7                     T3CKIPPS        equ	3751	;# 
   131   000EA8                     T3GPPS          equ	3752	;# 
   132   000EA9                     T5CKIPPS        equ	3753	;# 
   133   000EAA                     T5GPPS          equ	3754	;# 
   134   000EAB                     T2INPPS         equ	3755	;# 
   135   000EAC                     T4INPPS         equ	3756	;# 
   136   000EAD                     T6INPPS         equ	3757	;# 
   137   000EAE                     ADACTPPS        equ	3758	;# 
   138   000EAF                     CCP1PPS         equ	3759	;# 
   139   000EB0                     CCP2PPS         equ	3760	;# 
   140   000EB1                     CWG1PPS         equ	3761	;# 
   141   000EB1                     CWGINPPS        equ	3761	;# 
   142   000EB2                     MDCARLPPS       equ	3762	;# 
   143   000EB3                     MDCARHPPS       equ	3763	;# 
   144   000EB4                     MDSRCPPS        equ	3764	;# 
   145   000EB5                     RX1PPS          equ	3765	;# 
   146   000EB5                     RXPPS           equ	3765	;# 
   147   000EB6                     CK1PPS          equ	3766	;# 
   148   000EB6                     TX1PPS          equ	3766	;# 
   149   000EB6                     CKPPS           equ	3766	;# 
   150   000EB6                     TXPPS           equ	3766	;# 
   151   000EB7                     SSP1CLKPPS      equ	3767	;# 
   152   000EB7                     SSPCLKPPS       equ	3767	;# 
   153   000EB8                     SSP1DATPPS      equ	3768	;# 
   154   000EB8                     SSPDATPPS       equ	3768	;# 
   155   000EB9                     SSP1SSPPS       equ	3769	;# 
   156   000EB9                     SSPSSPPS        equ	3769	;# 
   157   000EBA                     IPR0            equ	3770	;# 
   158   000EBB                     IPR1            equ	3771	;# 
   159   000EBC                     IPR2            equ	3772	;# 
   160   000EBD                     IPR3            equ	3773	;# 
   161   000EBE                     IPR4            equ	3774	;# 
   162   000EBF                     IPR5            equ	3775	;# 
   163   000EC0                     IPR6            equ	3776	;# 
   164   000EC1                     IPR7            equ	3777	;# 
   165   000EC2                     PIE0            equ	3778	;# 
   166   000EC3                     PIE1            equ	3779	;# 
   167   000EC4                     PIE2            equ	3780	;# 
   168   000EC5                     PIE3            equ	3781	;# 
   169   000EC6                     PIE4            equ	3782	;# 
   170   000EC7                     PIE5            equ	3783	;# 
   171   000EC8                     PIE6            equ	3784	;# 
   172   000EC9                     PIE7            equ	3785	;# 
   173   000ECA                     PIR0            equ	3786	;# 
   174   000ECB                     PIR1            equ	3787	;# 
   175   000ECC                     PIR2            equ	3788	;# 
   176   000ECD                     PIR3            equ	3789	;# 
   177   000ECE                     PIR4            equ	3790	;# 
   178   000ECF                     PIR5            equ	3791	;# 
   179   000ED0                     PIR6            equ	3792	;# 
   180   000ED1                     PIR7            equ	3793	;# 
   181   000ED2                     WDTCON0         equ	3794	;# 
   182   000ED3                     WDTCON1         equ	3795	;# 
   183   000ED4                     WDTPSL          equ	3796	;# 
   184   000ED5                     WDTPSH          equ	3797	;# 
   185   000ED6                     WDTTMR          equ	3798	;# 
   186   000ED7                     CPUDOZE         equ	3799	;# 
   187   000ED8                     OSCCON1         equ	3800	;# 
   188   000ED9                     OSCCON2         equ	3801	;# 
   189   000EDA                     OSCCON3         equ	3802	;# 
   190   000EDB                     OSCSTAT         equ	3803	;# 
   191   000EDB                     OSCSTAT1        equ	3803	;# 
   192   000EDC                     OSCEN           equ	3804	;# 
   193   000EDD                     OSCTUNE         equ	3805	;# 
   194   000EDE                     OSCFRQ          equ	3806	;# 
   195   000EDF                     VREGCON         equ	3807	;# 
   196   000EE0                     BORCON          equ	3808	;# 
   197   000EE1                     PMD0            equ	3809	;# 
   198   000EE2                     PMD1            equ	3810	;# 
   199   000EE3                     PMD2            equ	3811	;# 
   200   000EE4                     PMD3            equ	3812	;# 
   201   000EE5                     PMD4            equ	3813	;# 
   202   000EE6                     PMD5            equ	3814	;# 
   203   000EE7                     RA0PPS          equ	3815	;# 
   204   000EE8                     RA1PPS          equ	3816	;# 
   205   000EE9                     RA2PPS          equ	3817	;# 
   206   000EEA                     RA3PPS          equ	3818	;# 
   207   000EEB                     RA4PPS          equ	3819	;# 
   208   000EEC                     RA5PPS          equ	3820	;# 
   209   000EED                     RA6PPS          equ	3821	;# 
   210   000EEE                     RA7PPS          equ	3822	;# 
   211   000EEF                     RB0PPS          equ	3823	;# 
   212   000EF0                     RB1PPS          equ	3824	;# 
   213   000EF1                     RB2PPS          equ	3825	;# 
   214   000EF2                     RB3PPS          equ	3826	;# 
   215   000EF3                     RB4PPS          equ	3827	;# 
   216   000EF4                     RB5PPS          equ	3828	;# 
   217   000EF5                     RB6PPS          equ	3829	;# 
   218   000EF6                     RB7PPS          equ	3830	;# 
   219   000EF7                     RC0PPS          equ	3831	;# 
   220   000EF8                     RC1PPS          equ	3832	;# 
   221   000EF9                     RC2PPS          equ	3833	;# 
   222   000EFA                     RC3PPS          equ	3834	;# 
   223   000EFB                     RC4PPS          equ	3835	;# 
   224   000EFC                     RC5PPS          equ	3836	;# 
   225   000EFD                     RC6PPS          equ	3837	;# 
   226   000EFE                     RC7PPS          equ	3838	;# 
   227   000EFF                     RD0PPS          equ	3839	;# 
   228   000F00                     RD1PPS          equ	3840	;# 
   229   000F01                     RD2PPS          equ	3841	;# 
   230   000F02                     RD3PPS          equ	3842	;# 
   231   000F03                     RD4PPS          equ	3843	;# 
   232   000F04                     RD5PPS          equ	3844	;# 
   233   000F05                     RD6PPS          equ	3845	;# 
   234   000F06                     RD7PPS          equ	3846	;# 
   235   000F07                     RE0PPS          equ	3847	;# 
   236   000F08                     RE1PPS          equ	3848	;# 
   237   000F09                     RE2PPS          equ	3849	;# 
   238   000F0A                     IOCAF           equ	3850	;# 
   239   000F0B                     IOCAN           equ	3851	;# 
   240   000F0C                     IOCAP           equ	3852	;# 
   241   000F0D                     INLVLA          equ	3853	;# 
   242   000F0E                     SLRCONA         equ	3854	;# 
   243   000F0F                     ODCONA          equ	3855	;# 
   244   000F10                     WPUA            equ	3856	;# 
   245   000F11                     ANSELA          equ	3857	;# 
   246   000F12                     IOCBF           equ	3858	;# 
   247   000F13                     IOCBN           equ	3859	;# 
   248   000F14                     IOCBP           equ	3860	;# 
   249   000F15                     INLVLB          equ	3861	;# 
   250   000F16                     SLRCONB         equ	3862	;# 
   251   000F17                     ODCONB          equ	3863	;# 
   252   000F18                     WPUB            equ	3864	;# 
   253   000F19                     ANSELB          equ	3865	;# 
   254   000F1A                     IOCCF           equ	3866	;# 
   255   000F1B                     IOCCN           equ	3867	;# 
   256   000F1C                     IOCCP           equ	3868	;# 
   257   000F1D                     INLVLC          equ	3869	;# 
   258   000F1E                     SLRCONC         equ	3870	;# 
   259   000F1F                     ODCONC          equ	3871	;# 
   260   000F20                     WPUC            equ	3872	;# 
   261   000F21                     ANSELC          equ	3873	;# 
   262   000F22                     INLVLD          equ	3874	;# 
   263   000F23                     SLRCOND         equ	3875	;# 
   264   000F24                     ODCOND          equ	3876	;# 
   265   000F25                     WPUD            equ	3877	;# 
   266   000F26                     ANSELD          equ	3878	;# 
   267   000F27                     IOCEF           equ	3879	;# 
   268   000F28                     IOCEN           equ	3880	;# 
   269   000F29                     IOCEP           equ	3881	;# 
   270   000F2A                     INLVLE          equ	3882	;# 
   271   000F2B                     SLRCONE         equ	3883	;# 
   272   000F2C                     ODCONE          equ	3884	;# 
   273   000F2D                     WPUE            equ	3885	;# 
   274   000F2E                     ANSELE          equ	3886	;# 
   275   000F2F                     HLVDCON0        equ	3887	;# 
   276   000F30                     HLVDCON1        equ	3888	;# 
   277   000F31                     FVRCON          equ	3889	;# 
   278   000F32                     ZCDCON          equ	3890	;# 
   279   000F33                     DAC1CON0        equ	3891	;# 
   280   000F34                     DAC1CON1        equ	3892	;# 
   281   000F35                     CM2CON0         equ	3893	;# 
   282   000F36                     CM2CON1         equ	3894	;# 
   283   000F37                     CM2NCH          equ	3895	;# 
   284   000F38                     CM2PCH          equ	3896	;# 
   285   000F39                     CM1CON0         equ	3897	;# 
   286   000F3A                     CM1CON1         equ	3898	;# 
   287   000F3B                     CM1NCH          equ	3899	;# 
   288   000F3C                     CM1PCH          equ	3900	;# 
   289   000F3D                     CMOUT           equ	3901	;# 
   290   000F3E                     CLKRCON         equ	3902	;# 
   291   000F3F                     CLKRCLK         equ	3903	;# 
   292   000F40                     CWG1CLK         equ	3904	;# 
   293   000F40                     CWG1CLKCON      equ	3904	;# 
   294   000F41                     CWG1ISM         equ	3905	;# 
   295   000F42                     CWG1DBR         equ	3906	;# 
   296   000F43                     CWG1DBF         equ	3907	;# 
   297   000F44                     CWG1CON0        equ	3908	;# 
   298   000F45                     CWG1CON1        equ	3909	;# 
   299   000F46                     CWG1AS0         equ	3910	;# 
   300   000F47                     CWG1AS1         equ	3911	;# 
   301   000F48                     CWG1STR         equ	3912	;# 
   302   000F49                     SCANLADR        equ	3913	;# 
   303   000F49                     SCANLADRL       equ	3913	;# 
   304   000F4A                     SCANLADRH       equ	3914	;# 
   305   000F4B                     SCANLADRU       equ	3915	;# 
   306   000F4C                     SCANHADR        equ	3916	;# 
   307   000F4C                     SCANHADRL       equ	3916	;# 
   308   000F4D                     SCANHADRH       equ	3917	;# 
   309   000F4E                     SCANHADRU       equ	3918	;# 
   310   000F4F                     SCANCON0        equ	3919	;# 
   311   000F50                     SCANTRIG        equ	3920	;# 
   312   000F51                     MDCON0          equ	3921	;# 
   313   000F52                     MDCON1          equ	3922	;# 
   314   000F53                     MDSRC           equ	3923	;# 
   315   000F54                     MDCARL          equ	3924	;# 
   316   000F55                     MDCARH          equ	3925	;# 
   317   000F56                     ADACT           equ	3926	;# 
   318   000F57                     ADCLK           equ	3927	;# 
   319   000F58                     ADREF           equ	3928	;# 
   320   000F59                     ADCON1          equ	3929	;# 
   321   000F5A                     ADCON2          equ	3930	;# 
   322   000F5B                     ADCON3          equ	3931	;# 
   323   000F5C                     ADACQ           equ	3932	;# 
   324   000F5D                     ADCAP           equ	3933	;# 
   325   000F5E                     ADPRE           equ	3934	;# 
   326   000F5F                     ADPCH           equ	3935	;# 
   327   000F60                     ADCON0          equ	3936	;# 
   328   000F61                     ADPREV          equ	3937	;# 
   329   000F61                     ADPREVL         equ	3937	;# 
   330   000F62                     ADPREVH         equ	3938	;# 
   331   000F63                     ADRES           equ	3939	;# 
   332   000F63                     ADRESL          equ	3939	;# 
   333   000F64                     ADRESH          equ	3940	;# 
   334   000F65                     ADSTAT          equ	3941	;# 
   335   000F66                     ADRPT           equ	3942	;# 
   336   000F67                     ADCNT           equ	3943	;# 
   337   000F68                     ADSTPT          equ	3944	;# 
   338   000F68                     ADSTPTL         equ	3944	;# 
   339   000F69                     ADSTPTH         equ	3945	;# 
   340   000F6A                     ADLTH           equ	3946	;# 
   341   000F6A                     ADLTHL          equ	3946	;# 
   342   000F6B                     ADLTHH          equ	3947	;# 
   343   000F6C                     ADUTH           equ	3948	;# 
   344   000F6C                     ADUTHL          equ	3948	;# 
   345   000F6D                     ADUTHH          equ	3949	;# 
   346   000F6E                     ADERR           equ	3950	;# 
   347   000F6E                     ADERRL          equ	3950	;# 
   348   000F6F                     ADERRH          equ	3951	;# 
   349   000F70                     ADACC           equ	3952	;# 
   350   000F70                     ADACCL          equ	3952	;# 
   351   000F71                     ADACCH          equ	3953	;# 
   352   000F72                     ADFLTR          equ	3954	;# 
   353   000F72                     ADFLTRL         equ	3954	;# 
   354   000F73                     ADFLTRH         equ	3955	;# 
   355   000F74                     CRCDATA         equ	3956	;# 
   356   000F74                     CRCDATL         equ	3956	;# 
   357   000F75                     CRCDATH         equ	3957	;# 
   358   000F76                     CRCACC          equ	3958	;# 
   359   000F76                     CRCACCL         equ	3958	;# 
   360   000F77                     CRCACCH         equ	3959	;# 
   361   000F78                     CRCSHFT         equ	3960	;# 
   362   000F78                     CRCSHIFTL       equ	3960	;# 
   363   000F79                     CRCSHIFTH       equ	3961	;# 
   364   000F7A                     CRCXOR          equ	3962	;# 
   365   000F7A                     CRCXORL         equ	3962	;# 
   366   000F7B                     CRCXORH         equ	3963	;# 
   367   000F7C                     CRCCON0         equ	3964	;# 
   368   000F7D                     CRCCON1         equ	3965	;# 
   369   000F7E                     NVMADR          equ	3966	;# 
   370   000F7E                     NVMADRL         equ	3966	;# 
   371   000F7F                     NVMADRH         equ	3967	;# 
   372   000F80                     NVMDAT          equ	3968	;# 
   373   000F81                     NVMCON1         equ	3969	;# 
   374   000F82                     NVMCON2         equ	3970	;# 
   375   000F83                     LATA            equ	3971	;# 
   376   000F84                     LATB            equ	3972	;# 
   377   000F85                     LATC            equ	3973	;# 
   378   000F86                     LATD            equ	3974	;# 
   379   000F87                     LATE            equ	3975	;# 
   380   000F88                     TRISA           equ	3976	;# 
   381   000F88                     DDRA            equ	3976	;# 
   382   000F89                     TRISB           equ	3977	;# 
   383   000F89                     DDRB            equ	3977	;# 
   384   000F8A                     TRISC           equ	3978	;# 
   385   000F8A                     DDRC            equ	3978	;# 
   386   000F8B                     TRISD           equ	3979	;# 
   387   000F8B                     DDRD            equ	3979	;# 
   388   000F8C                     TRISE           equ	3980	;# 
   389   000F8C                     DDRE            equ	3980	;# 
   390   000F8D                     PORTA           equ	3981	;# 
   391   000F8E                     PORTB           equ	3982	;# 
   392   000F8F                     PORTC           equ	3983	;# 
   393   000F90                     PORTD           equ	3984	;# 
   394   000F91                     PORTE           equ	3985	;# 
   395   000F92                     SSP1BUF         equ	3986	;# 
   396   000F93                     SSP1ADD         equ	3987	;# 
   397   000F94                     SSP1MSK         equ	3988	;# 
   398   000F95                     SSP1STAT        equ	3989	;# 
   399   000F96                     SSP1CON1        equ	3990	;# 
   400   000F97                     SSP1CON2        equ	3991	;# 
   401   000F98                     SSP1CON3        equ	3992	;# 
   402   000F99                     RC1REG          equ	3993	;# 
   403   000F99                     RCREG           equ	3993	;# 
   404   000F99                     RCREG1          equ	3993	;# 
   405   000F9A                     TX1REG          equ	3994	;# 
   406   000F9A                     TXREG1          equ	3994	;# 
   407   000F9A                     TXREG           equ	3994	;# 
   408   000F9B                     SP1BRG          equ	3995	;# 
   409   000F9B                     SP1BRGL         equ	3995	;# 
   410   000F9B                     SPBRG           equ	3995	;# 
   411   000F9B                     SPBRG1          equ	3995	;# 
   412   000F9B                     SPBRGL          equ	3995	;# 
   413   000F9C                     SP1BRGH         equ	3996	;# 
   414   000F9C                     SPBRGH          equ	3996	;# 
   415   000F9C                     SPBRGH1         equ	3996	;# 
   416   000F9D                     RC1STA          equ	3997	;# 
   417   000F9D                     RCSTA1          equ	3997	;# 
   418   000F9D                     RCSTA           equ	3997	;# 
   419   000F9E                     TX1STA          equ	3998	;# 
   420   000F9E                     TXSTA1          equ	3998	;# 
   421   000F9E                     TXSTA           equ	3998	;# 
   422   000F9F                     BAUD1CON        equ	3999	;# 
   423   000F9F                     BAUDCON1        equ	3999	;# 
   424   000F9F                     BAUDCTL1        equ	3999	;# 
   425   000F9F                     BAUDCON         equ	3999	;# 
   426   000F9F                     BAUDCTL         equ	3999	;# 
   427   000FA0                     PWM4DC          equ	4000	;# 
   428   000FA0                     PWM4DCL         equ	4000	;# 
   429   000FA1                     PWM4DCH         equ	4001	;# 
   430   000FA2                     PWM4CON         equ	4002	;# 
   431   000FA3                     PWM3DC          equ	4003	;# 
   432   000FA3                     PWM3DCL         equ	4003	;# 
   433   000FA4                     PWM3DCH         equ	4004	;# 
   434   000FA5                     PWM3CON         equ	4005	;# 
   435   000FA6                     CCPR2           equ	4006	;# 
   436   000FA6                     CCPR2L          equ	4006	;# 
   437   000FA7                     CCPR2H          equ	4007	;# 
   438   000FA8                     CCP2CON         equ	4008	;# 
   439   000FA9                     CCP2CAP         equ	4009	;# 
   440   000FAA                     CCPR1           equ	4010	;# 
   441   000FAA                     CCPR1L          equ	4010	;# 
   442   000FAB                     CCPR1H          equ	4011	;# 
   443   000FAC                     CCP1CON         equ	4012	;# 
   444   000FAD                     CCP1CAP         equ	4013	;# 
   445   000FAE                     CCPTMRS         equ	4014	;# 
   446   000FAF                     T6TMR           equ	4015	;# 
   447   000FAF                     TMR6            equ	4015	;# 
   448   000FB0                     T6PR            equ	4016	;# 
   449   000FB0                     PR6             equ	4016	;# 
   450   000FB1                     T6CON           equ	4017	;# 
   451   000FB2                     T6HLT           equ	4018	;# 
   452   000FB3                     T6CLKCON        equ	4019	;# 
   453   000FB3                     T6CLK           equ	4019	;# 
   454   000FB4                     T6RST           equ	4020	;# 
   455   000FB5                     T4TMR           equ	4021	;# 
   456   000FB5                     TMR4            equ	4021	;# 
   457   000FB6                     T4PR            equ	4022	;# 
   458   000FB6                     PR4             equ	4022	;# 
   459   000FB7                     T4CON           equ	4023	;# 
   460   000FB8                     T4HLT           equ	4024	;# 
   461   000FB9                     T4CLKCON        equ	4025	;# 
   462   000FB9                     T4CLK           equ	4025	;# 
   463   000FBA                     T4RST           equ	4026	;# 
   464   000FBB                     T2TMR           equ	4027	;# 
   465   000FBB                     TMR2            equ	4027	;# 
   466   000FBC                     T2PR            equ	4028	;# 
   467   000FBC                     PR2             equ	4028	;# 
   468   000FBD                     T2CON           equ	4029	;# 
   469   000FBE                     T2HLT           equ	4030	;# 
   470   000FBF                     T2CLKCON        equ	4031	;# 
   471   000FBF                     T2CLK           equ	4031	;# 
   472   000FC0                     T2RST           equ	4032	;# 
   473   000FC1                     TMR5            equ	4033	;# 
   474   000FC1                     TMR5L           equ	4033	;# 
   475   000FC2                     TMR5H           equ	4034	;# 
   476   000FC3                     T5CON           equ	4035	;# 
   477   000FC4                     T5GCON          equ	4036	;# 
   478   000FC4                     PR5             equ	4036	;# 
   479   000FC5                     T5GATE          equ	4037	;# 
   480   000FC5                     TMR5GATE        equ	4037	;# 
   481   000FC6                     T5CLK           equ	4038	;# 
   482   000FC6                     TMR5CLK         equ	4038	;# 
   483   000FC7                     TMR3            equ	4039	;# 
   484   000FC7                     TMR3L           equ	4039	;# 
   485   000FC8                     TMR3H           equ	4040	;# 
   486   000FC9                     T3CON           equ	4041	;# 
   487   000FCA                     T3GCON          equ	4042	;# 
   488   000FCA                     PR3             equ	4042	;# 
   489   000FCB                     T3GATE          equ	4043	;# 
   490   000FCB                     TMR3GATE        equ	4043	;# 
   491   000FCC                     T3CLK           equ	4044	;# 
   492   000FCC                     TMR3CLK         equ	4044	;# 
   493   000FCD                     TMR1            equ	4045	;# 
   494   000FCD                     TMR1L           equ	4045	;# 
   495   000FCE                     TMR1H           equ	4046	;# 
   496   000FCF                     T1CON           equ	4047	;# 
   497   000FD0                     T1GCON          equ	4048	;# 
   498   000FD0                     PR1             equ	4048	;# 
   499   000FD1                     T1GATE          equ	4049	;# 
   500   000FD1                     TMR1GATE        equ	4049	;# 
   501   000FD2                     T1CLK           equ	4050	;# 
   502   000FD2                     TMR1CLK         equ	4050	;# 
   503   000FD3                     TMR0L           equ	4051	;# 
   504   000FD3                     TMR0            equ	4051	;# 
   505   000FD4                     TMR0H           equ	4052	;# 
   506   000FD4                     PR0             equ	4052	;# 
   507   000FD5                     T0CON0          equ	4053	;# 
   508   000FD6                     T0CON1          equ	4054	;# 
   509   000FD7                     PCON0           equ	4055	;# 
   510   000FD8                     STATUS          equ	4056	;# 
   511   000FD9                     FSR2            equ	4057	;# 
   512   000FD9                     FSR2L           equ	4057	;# 
   513   000FDA                     FSR2H           equ	4058	;# 
   514   000FDB                     PLUSW2          equ	4059	;# 
   515   000FDC                     PREINC2         equ	4060	;# 
   516   000FDD                     POSTDEC2        equ	4061	;# 
   517   000FDE                     POSTINC2        equ	4062	;# 
   518   000FDF                     INDF2           equ	4063	;# 
   519   000FE0                     BSR             equ	4064	;# 
   520   000FE1                     FSR1            equ	4065	;# 
   521   000FE1                     FSR1L           equ	4065	;# 
   522   000FE2                     FSR1H           equ	4066	;# 
   523   000FE3                     PLUSW1          equ	4067	;# 
   524   000FE4                     PREINC1         equ	4068	;# 
   525   000FE5                     POSTDEC1        equ	4069	;# 
   526   000FE6                     POSTINC1        equ	4070	;# 
   527   000FE7                     INDF1           equ	4071	;# 
   528   000FE8                     WREG            equ	4072	;# 
   529   000FE9                     FSR0            equ	4073	;# 
   530   000FE9                     FSR0L           equ	4073	;# 
   531   000FEA                     FSR0H           equ	4074	;# 
   532   000FEB                     PLUSW0          equ	4075	;# 
   533   000FEC                     PREINC0         equ	4076	;# 
   534   000FED                     POSTDEC0        equ	4077	;# 
   535   000FEE                     POSTINC0        equ	4078	;# 
   536   000FEF                     INDF0           equ	4079	;# 
   537   000FF2                     INTCON          equ	4082	;# 
   538   000FF3                     PROD            equ	4083	;# 
   539   000FF3                     PRODL           equ	4083	;# 
   540   000FF4                     PRODH           equ	4084	;# 
   541   000FF5                     TABLAT          equ	4085	;# 
   542   000FF6                     TBLPTR          equ	4086	;# 
   543   000FF6                     TBLPTRL         equ	4086	;# 
   544   000FF7                     TBLPTRH         equ	4087	;# 
   545   000FF8                     TBLPTRU         equ	4088	;# 
   546   000FF9                     PCLAT           equ	4089	;# 
   547   000FF9                     PC              equ	4089	;# 
   548   000FF9                     PCL             equ	4089	;# 
   549   000FFA                     PCLATH          equ	4090	;# 
   550   000FFB                     PCLATU          equ	4091	;# 
   551   000FFC                     STKPTR          equ	4092	;# 
   552   000FFD                     TOS             equ	4093	;# 
   553   000FFD                     TOSL            equ	4093	;# 
   554   000FFE                     TOSH            equ	4094	;# 
   555   000FFF                     TOSU            equ	4095	;# 
   556                           
   557                           	psect	idataCOMRAM
   558   0012AA                     __pidataCOMRAM:
   559                           	callstack 0
   560                           
   561                           ;initializer for getKey@F10559
   562   0012AA  31                 	db	49
   563   0012AB  34                 	db	52
   564   0012AC  37                 	db	55
   565   0012AD  2A                 	db	42
   566   0012AE  32                 	db	50
   567   0012AF  35                 	db	53
   568   0012B0  38                 	db	56
   569   0012B1  30                 	db	48
   570   0012B2  33                 	db	51
   571   0012B3  36                 	db	54
   572   0012B4  39                 	db	57
   573   0012B5  23                 	db	35
   574   0012B6  41                 	db	65
   575   0012B7  42                 	db	66
   576   0012B8  43                 	db	67
   577   0012B9  44                 	db	68
   578   000F26                     _ANSELD         set	3878
   579   000F21                     _ANSELC         set	3873
   580   000F19                     _ANSELB         set	3865
   581   000F11                     _ANSELA         set	3857
   582   000F85                     _LATC           set	3973
   583   000F8B                     _TRISD          set	3979
   584   000F8A                     _TRISC          set	3978
   585   000F89                     _TRISB          set	3977
   586   000F88                     _TRISA          set	3976
   587   000F86                     _LATD           set	3974
   588   000F83                     _LATA           set	3971
   589   000F8E                     _PORTB          set	3982
   590   000F84                     _LATB           set	3972
   591                           
   592                           ; #config settings
   593                           
   594                           	psect	cinit
   595   001278                     __pcinit:
   596                           	callstack 0
   597   001278                     start_initialization:
   598                           	callstack 0
   599   001278                     __initialization:
   600                           	callstack 0
   601                           
   602                           ; Initialize objects allocated to COMRAM (16 bytes)
   603                           ; load TBLPTR registers with __pidataCOMRAM
   604   001278  0EAA               	movlw	low __pidataCOMRAM
   605   00127A  6EF6               	movwf	tblptrl,c
   606   00127C  0E12               	movlw	high __pidataCOMRAM
   607   00127E  6EF7               	movwf	tblptrh,c
   608   001280  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   609   001282  6EF8               	movwf	tblptru,c
   610   001284  EE00  F02A         	lfsr	0,__pdataCOMRAM
   611   001288  EE10 F010          	lfsr	1,16
   612   00128C                     copy_data0:
   613   00128C  0009               	tblrd		*+
   614   00128E  CFF5 FFEE          	movff	tablat,postinc0
   615   001292  50E5               	movf	postdec1,w,c
   616   001294  50E1               	movf	fsr1l,w,c
   617   001296  E1FA               	bnz	copy_data0
   618                           
   619                           ; Clear objects allocated to COMRAM (10 bytes)
   620   001298  EE00  F03A         	lfsr	0,__pbssCOMRAM
   621   00129C  0E0A               	movlw	10
   622   00129E                     clear_0:
   623   00129E  6AEE               	clrf	postinc0,c
   624   0012A0  06E8               	decf	wreg,f,c
   625   0012A2  E1FD               	bnz	clear_0
   626   0012A4                     end_of_initialization:
   627                           	callstack 0
   628   0012A4                     __end_of__initialization:
   629                           	callstack 0
   630   0012A4  0100               	movlb	0
   631   0012A6  EFC3  F008         	goto	_main	;jump to C main() function
   632                           
   633                           	psect	bssCOMRAM
   634   00003A                     __pbssCOMRAM:
   635                           	callstack 0
   636   00003A                     	ds	8
   637   000042                     _i:
   638                           	callstack 0
   639   000042                     	ds	2
   640                           
   641                           	psect	dataCOMRAM
   642   00002A                     __pdataCOMRAM:
   643                           	callstack 0
   644   00002A                     getKey@F10559:
   645                           	callstack 0
   646   00002A                     	ds	16
   647                           
   648                           	psect	cstackCOMRAM
   649   000001                     __pcstackCOMRAM:
   650                           	callstack 0
   651   000001                     showTime@time:
   652                           	callstack 0
   653   000001                     ??_getKey:
   654                           
   655                           ; 1 bytes @ 0x0
   656   000001                     	ds	1
   657   000002                     ??_showTime:
   658                           
   659                           ; 1 bytes @ 0x1
   660   000002                     	ds	1
   661   000003                     getKey@keys:
   662                           	callstack 0
   663                           
   664                           ; 16 bytes @ 0x2
   665   000003                     	ds	1
   666   000004                     showTime@num:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x3
   670   000004                     	ds	2
   671   000006                     showTime@j:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x5
   675   000006                     	ds	13
   676   000013                     getKey@col:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0x12
   680   000013                     	ds	2
   681   000015                     getKey@key:
   682                           	callstack 0
   683                           
   684                           ; 1 bytes @ 0x14
   685   000015                     	ds	1
   686   000016                     getKey@pressed:
   687                           	callstack 0
   688                           
   689                           ; 1 bytes @ 0x15
   690   000016                     	ds	1
   691   000017                     getKey@row:
   692                           	callstack 0
   693                           
   694                           ; 2 bytes @ 0x16
   695   000017                     	ds	2
   696   000019                     getKey@idx:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0x18
   700   000019                     	ds	2
   701   00001B                     ??_main:
   702                           
   703                           ; 1 bytes @ 0x1A
   704   00001B                     	ds	1
   705   00001C                     main@time:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x1B
   709   00001C                     	ds	2
   710   00001E                     main@nums:
   711                           	callstack 0
   712                           
   713                           ; 8 bytes @ 0x1D
   714   00001E                     	ds	8
   715   000026                     main@last_key:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x25
   719   000026                     	ds	1
   720   000027                     main@i:
   721                           	callstack 0
   722                           
   723                           ; 2 bytes @ 0x26
   724   000027                     	ds	2
   725   000029                     main@key:
   726                           	callstack 0
   727                           
   728                           ; 1 bytes @ 0x28
   729   000029                     	ds	1
   730                           
   731 ;;
   732 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   733 ;;
   734 ;; *************** function _main *****************
   735 ;; Defined at:
   736 ;;		line 131 in file "main.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  nums            8   29[COMRAM] short [4]
   741 ;;  i               2   38[COMRAM] short 
   742 ;;  time            2   27[COMRAM] short 
   743 ;;  key             1   40[COMRAM] unsigned char 
   744 ;;  last_key        1   37[COMRAM] unsigned char 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   755 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   757 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   758 ;;Total ram usage:       15 bytes
   759 ;; Hardware stack levels required when called: 1
   760 ;; This function calls:
   761 ;;		_getKey
   762 ;;		_showTime
   763 ;; This function is called by:
   764 ;;		Startup code after reset
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text0
   769   001186                     __ptext0:
   770                           	callstack 0
   771   001186                     _main:
   772                           	callstack 30
   773   001186                     
   774                           ;main.c: 134:     short time = 0;
   775   001186  6A1D               	clrf	(main@time+1)^0,c
   776   001188  0E00               	movlw	0
   777   00118A  6E1C               	movwf	main@time^0,c
   778                           
   779                           ;main.c: 135:     char key = 'q';
   780   00118C  0E71               	movlw	113
   781   00118E  6E29               	movwf	main@key^0,c
   782                           
   783                           ;main.c: 136:     char last_key = 'q';
   784   001190  0E71               	movlw	113
   785   001192  6E26               	movwf	main@last_key^0,c
   786   001194                     
   787                           ;main.c: 137:     short nums[] = {0,0,0,0};
   788   001194  EE20  F01E         	lfsr	2,main@nums
   789   001198  0E07               	movlw	7
   790   00119A                     u211:
   791   00119A  6ADE               	clrf	postinc2,c
   792   00119C  06E8               	decf	wreg,f,c
   793   00119E  E2FD               	bc	u211
   794   0011A0                     
   795                           ;main.c: 138:     ANSELA = 0;
   796   0011A0  010F               	movlb	15	; () banked
   797   0011A2  6B11               	clrf	17,b	;volatile
   798   0011A4                     
   799                           ; BSR set to: 15
   800                           ;main.c: 139:     ANSELB = 0;
   801   0011A4  6B19               	clrf	25,b	;volatile
   802   0011A6                     
   803                           ; BSR set to: 15
   804                           ;main.c: 140:     ANSELC = 0;
   805   0011A6  6B21               	clrf	33,b	;volatile
   806   0011A8                     
   807                           ; BSR set to: 15
   808                           ;main.c: 141:     ANSELD = 0;
   809   0011A8  6B26               	clrf	38,b	;volatile
   810   0011AA                     
   811                           ; BSR set to: 15
   812                           ;main.c: 142:     TRISA = 0b00000000;
   813   0011AA  6A88               	clrf	136,c	;volatile
   814   0011AC                     
   815                           ; BSR set to: 15
   816                           ;main.c: 143:     TRISB = 0b11110000;
   817   0011AC  0EF0               	movlw	240
   818   0011AE  6E89               	movwf	137,c	;volatile
   819   0011B0                     
   820                           ; BSR set to: 15
   821                           ;main.c: 144:     TRISC = 0;
   822   0011B0  6A8A               	clrf	138,c	;volatile
   823   0011B2                     
   824                           ; BSR set to: 15
   825                           ;main.c: 145:     TRISD = 0;
   826   0011B2  6A8B               	clrf	139,c	;volatile
   827   0011B4                     
   828                           ; BSR set to: 15
   829                           ;main.c: 146:     LATA = 0xFF;
   830   0011B4  6883               	setf	131,c	;volatile
   831   0011B6                     
   832                           ; BSR set to: 15
   833                           ;main.c: 147:     LATB = 0x0F;
   834   0011B6  0E0F               	movlw	15
   835   0011B8  6E84               	movwf	132,c	;volatile
   836   0011BA                     
   837                           ; BSR set to: 15
   838                           ;main.c: 148:     LATC = 0b10000001;
   839   0011BA  0E81               	movlw	129
   840   0011BC  6E85               	movwf	133,c	;volatile
   841   0011BE                     
   842                           ; BSR set to: 15
   843                           ;main.c: 149:     LATD = 0;
   844   0011BE  6A86               	clrf	134,c	;volatile
   845   0011C0                     l1092:
   846                           
   847                           ;main.c: 152:     {;main.c: 154:         key = getKey();
   848   0011C0  EC24  F008         	call	_getKey	;wreg free
   849   0011C4  6E29               	movwf	main@key^0,c
   850   0011C6                     
   851                           ;main.c: 155:         if(key >= '0' && key <= '9' && last_key != key){
   852   0011C6  0E2F               	movlw	47
   853   0011C8  6429               	cpfsgt	main@key^0,c
   854   0011CA  EFE9  F008         	goto	u221
   855   0011CE  EFEB  F008         	goto	u220
   856   0011D2                     u221:
   857   0011D2  EF2B  F009         	goto	l1116
   858   0011D6                     u220:
   859   0011D6  0E3A               	movlw	58
   860   0011D8  6029               	cpfslt	main@key^0,c
   861   0011DA  EFF1  F008         	goto	u231
   862   0011DE  EFF3  F008         	goto	u230
   863   0011E2                     u231:
   864   0011E2  EF2B  F009         	goto	l1116
   865   0011E6                     u230:
   866   0011E6  5029               	movf	main@key^0,w,c
   867   0011E8  1826               	xorwf	main@last_key^0,w,c
   868   0011EA  B4D8               	btfsc	status,2,c
   869   0011EC  EFFA  F008         	goto	u241
   870   0011F0  EFFC  F008         	goto	u240
   871   0011F4                     u241:
   872   0011F4  EF2B  F009         	goto	l1116
   873   0011F8                     u240:
   874   0011F8                     
   875                           ;main.c: 156:             for(i = 3; i>0; i--){
   876   0011F8  6A28               	clrf	(main@i+1)^0,c
   877   0011FA  0E03               	movlw	3
   878   0011FC  6E27               	movwf	main@i^0,c
   879   0011FE                     l1106:
   880                           
   881                           ;main.c: 157:                 nums[i] = nums[i-1];
   882   0011FE  5027               	movf	main@i^0,w,c
   883   001200  0D02               	mullw	2
   884   001202  CFF3 F01B          	movff	prodl,??_main
   885   001206  0EFE               	movlw	254
   886   001208  261B               	addwf	??_main^0,f,c
   887   00120A  501B               	movf	??_main^0,w,c
   888   00120C  0F1E               	addlw	low main@nums
   889   00120E  6ED9               	movwf	fsr2l,c
   890   001210  6ADA               	clrf	fsr2h,c
   891   001212  5027               	movf	main@i^0,w,c
   892   001214  0D02               	mullw	2
   893   001216  50F3               	movf	243,w,c
   894   001218  0F1E               	addlw	low main@nums
   895   00121A  6EE1               	movwf	fsr1l,c
   896   00121C  6AE2               	clrf	fsr1h,c
   897   00121E  CFDE FFE6          	movff	postinc2,postinc1
   898   001222  CFDD FFE5          	movff	postdec2,postdec1
   899   001226                     
   900                           ;main.c: 158:             }
   901   001226  0627               	decf	main@i^0,f,c
   902   001228  A0D8               	btfss	status,0,c
   903   00122A  0628               	decf	(main@i+1)^0,f,c
   904   00122C  BE28               	btfsc	(main@i+1)^0,7,c
   905   00122E  EF23  F009         	goto	u250
   906   001232  5028               	movf	(main@i+1)^0,w,c
   907   001234  E106               	bnz	u251
   908   001236  0427               	decf	main@i^0,w,c
   909   001238  B0D8               	btfsc	status,0,c
   910   00123A  EF21  F009         	goto	u251
   911   00123E  EF23  F009         	goto	u250
   912   001242                     u251:
   913   001242  EFFF  F008         	goto	l1106
   914   001246                     u250:
   915   001246                     
   916                           ;main.c: 159:             nums[0] = key -'0';
   917   001246  0ED0               	movlw	208
   918   001248  2429               	addwf	main@key^0,w,c
   919   00124A  6E1E               	movwf	main@nums^0,c
   920   00124C  6A1F               	clrf	(main@nums+1)^0,c
   921   00124E  0EFF               	movlw	255
   922   001250  221F               	addwfc	(main@nums+1)^0,f,c
   923   001252                     
   924                           ;main.c: 161:             i++;
   925   001252  4A27               	infsnz	main@i^0,f,c
   926   001254  2A28               	incf	(main@i+1)^0,f,c
   927   001256                     l1116:
   928                           
   929                           ;main.c: 164:         last_key = key;
   930   001256  C029  F026         	movff	main@key,main@last_key
   931   00125A                     
   932                           ;main.c: 165:         showTime(&nums);
   933   00125A  0E1E               	movlw	low main@nums
   934   00125C  6E01               	movwf	showTime@time^0,c
   935   00125E  EC81  F007         	call	_showTime	;wreg free
   936   001262                     
   937                           ;main.c: 166:         _delay((unsigned long)((1)*(8000000/4000.0)));
   938   001262  0E03               	movlw	3
   939   001264  6E1B               	movwf	??_main^0,c
   940   001266  0E98               	movlw	152
   941   001268                     u267:
   942   001268  2EE8               	decfsz	wreg,f,c
   943   00126A  D7FE               	bra	u267
   944   00126C  2E1B               	decfsz	??_main^0,f,c
   945   00126E  D7FC               	bra	u267
   946   001270  EFE0  F008         	goto	l1092
   947   001274  EFFE  F0FF         	goto	start
   948   001278                     __end_of_main:
   949                           	callstack 0
   950                           
   951 ;; *************** function _showTime *****************
   952 ;; Defined at:
   953 ;;		line 87 in file "main.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;  time            1    0[COMRAM] PTR short 
   956 ;;		 -> main@nums(8), 
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  j               2    5[COMRAM] int 
   959 ;;  num             2    3[COMRAM] int 
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   969 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   970 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   971 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   972 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   973 ;;Total ram usage:        7 bytes
   974 ;; Hardware stack levels used: 1
   975 ;; This function calls:
   976 ;;		Nothing
   977 ;; This function is called by:
   978 ;;		_main
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text1
   983   000F02                     __ptext1:
   984                           	callstack 0
   985   000F02                     _showTime:
   986                           	callstack 30
   987   000F02                     
   988                           ;main.c: 89:     for(int j = 0; j<4; j++){
   989   000F02  6A07               	clrf	(showTime@j+1)^0,c
   990   000F04  0E00               	movlw	0
   991   000F06  6E06               	movwf	showTime@j^0,c
   992   000F08  BE07               	btfsc	(showTime@j+1)^0,7,c
   993   000F0A  EF90  F007         	goto	u181
   994   000F0E  5007               	movf	(showTime@j+1)^0,w,c
   995   000F10  E109               	bnz	u180
   996   000F12  0E04               	movlw	4
   997   000F14  5C06               	subwf	showTime@j^0,w,c
   998   000F16  A0D8               	btfss	status,0,c
   999   000F18  EF90  F007         	goto	u181
  1000   000F1C  EF92  F007         	goto	u180
  1001   000F20                     u181:
  1002   000F20  EF94  F007         	goto	l1028
  1003   000F24                     u180:
  1004   000F24  EF23  F008         	goto	l61
  1005   000F28                     l1028:
  1006                           
  1007                           ;main.c: 90:         num = time[j];
  1008   000F28  5006               	movf	showTime@j^0,w,c
  1009   000F2A  0D02               	mullw	2
  1010   000F2C  5001               	movf	showTime@time^0,w,c
  1011   000F2E  24F3               	addwf	243,w,c
  1012   000F30  6ED9               	movwf	fsr2l,c
  1013   000F32  6ADA               	clrf	fsr2h,c
  1014   000F34  CFDE F004          	movff	postinc2,showTime@num
  1015   000F38  CFDD F005          	movff	postdec2,showTime@num+1
  1016   000F3C                     
  1017                           ;main.c: 91:         LATA = 1<<j;
  1018   000F3C  C006  F002         	movff	showTime@j,??_showTime
  1019   000F40  0E01               	movlw	1
  1020   000F42  6E03               	movwf	(??_showTime+1)^0,c
  1021   000F44  2A02               	incf	??_showTime^0,f,c
  1022   000F46  EFA7  F007         	goto	u194
  1023   000F4A                     u195:
  1024   000F4A  90D8               	bcf	status,0,c
  1025   000F4C  3603               	rlcf	(??_showTime+1)^0,f,c
  1026   000F4E                     u194:
  1027   000F4E  2E02               	decfsz	??_showTime^0,f,c
  1028   000F50  EFA5  F007         	goto	u195
  1029   000F54  5003               	movf	(??_showTime+1)^0,w,c
  1030   000F56  6E83               	movwf	131,c	;volatile
  1031                           
  1032                           ;main.c: 92:         switch(num){
  1033   000F58  EFD6  F007         	goto	l1054
  1034   000F5C                     l1032:
  1035                           
  1036                           ;main.c: 94:             LATD = 0b00111111;
  1037   000F5C  0E3F               	movlw	63
  1038   000F5E  6E86               	movwf	134,c	;volatile
  1039                           
  1040                           ;main.c: 95:             break;
  1041   000F60  EF0C  F008         	goto	l1056
  1042   000F64                     l1034:
  1043                           
  1044                           ;main.c: 98:             LATD = 0b00000110;
  1045   000F64  0E06               	movlw	6
  1046   000F66  6E86               	movwf	134,c	;volatile
  1047                           
  1048                           ;main.c: 99:             break;
  1049   000F68  EF0C  F008         	goto	l1056
  1050   000F6C                     l1036:
  1051                           
  1052                           ;main.c: 101:             LATD = 0b01011011;
  1053   000F6C  0E5B               	movlw	91
  1054   000F6E  6E86               	movwf	134,c	;volatile
  1055                           
  1056                           ;main.c: 102:             break;
  1057   000F70  EF0C  F008         	goto	l1056
  1058   000F74                     l1038:
  1059                           
  1060                           ;main.c: 104:             LATD = 0b01001111;
  1061   000F74  0E4F               	movlw	79
  1062   000F76  6E86               	movwf	134,c	;volatile
  1063                           
  1064                           ;main.c: 105:             break;
  1065   000F78  EF0C  F008         	goto	l1056
  1066   000F7C                     l1040:
  1067                           
  1068                           ;main.c: 107:             LATD = 0b01100110;
  1069   000F7C  0E66               	movlw	102
  1070   000F7E  6E86               	movwf	134,c	;volatile
  1071                           
  1072                           ;main.c: 108:             break;
  1073   000F80  EF0C  F008         	goto	l1056
  1074   000F84                     l1042:
  1075                           
  1076                           ;main.c: 110:             LATD = 0b01101101;
  1077   000F84  0E6D               	movlw	109
  1078   000F86  6E86               	movwf	134,c	;volatile
  1079                           
  1080                           ;main.c: 111:             break;
  1081   000F88  EF0C  F008         	goto	l1056
  1082   000F8C                     l1044:
  1083                           
  1084                           ;main.c: 113:             LATD = 0b01111101;
  1085   000F8C  0E7D               	movlw	125
  1086   000F8E  6E86               	movwf	134,c	;volatile
  1087                           
  1088                           ;main.c: 114:             break;
  1089   000F90  EF0C  F008         	goto	l1056
  1090   000F94                     l1046:
  1091                           
  1092                           ;main.c: 116:             LATD = 0b00000111;
  1093   000F94  0E07               	movlw	7
  1094   000F96  6E86               	movwf	134,c	;volatile
  1095                           
  1096                           ;main.c: 117:             break;
  1097   000F98  EF0C  F008         	goto	l1056
  1098   000F9C                     l1048:
  1099                           
  1100                           ;main.c: 119:             LATD = 0b01111111;
  1101   000F9C  0E7F               	movlw	127
  1102   000F9E  6E86               	movwf	134,c	;volatile
  1103                           
  1104                           ;main.c: 120:             break;
  1105   000FA0  EF0C  F008         	goto	l1056
  1106   000FA4                     l1050:
  1107                           
  1108                           ;main.c: 122:             LATD = 0b01101111;
  1109   000FA4  0E6F               	movlw	111
  1110   000FA6  6E86               	movwf	134,c	;volatile
  1111                           
  1112                           ;main.c: 123:             break;
  1113   000FA8  EF0C  F008         	goto	l1056
  1114   000FAC                     l1054:
  1115   000FAC  C004  F002         	movff	showTime@num,??_showTime
  1116   000FB0  C005  F003         	movff	showTime@num+1,??_showTime+1
  1117                           
  1118                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1119                           ; Switch size 1, requested type "simple"
  1120                           ; Number of cases is 1, Range of values is 0 to 0
  1121                           ; switch strategies available:
  1122                           ; Name         Instructions Cycles
  1123                           ; simple_byte            4     3 (average)
  1124                           ;	Chosen strategy is simple_byte
  1125   000FB4  5003               	movf	(??_showTime+1)^0,w,c
  1126   000FB6  0A00               	xorlw	0	; case 0
  1127   000FB8  B4D8               	btfsc	status,2,c
  1128   000FBA  EFE1  F007         	goto	l1142
  1129   000FBE  EF0C  F008         	goto	l1056
  1130   000FC2                     l1142:
  1131                           
  1132                           ; Switch size 1, requested type "simple"
  1133                           ; Number of cases is 10, Range of values is 0 to 9
  1134                           ; switch strategies available:
  1135                           ; Name         Instructions Cycles
  1136                           ; simple_byte           31    16 (average)
  1137                           ;	Chosen strategy is simple_byte
  1138   000FC2  5002               	movf	??_showTime^0,w,c
  1139   000FC4  0A00               	xorlw	0	; case 0
  1140   000FC6  B4D8               	btfsc	status,2,c
  1141   000FC8  EFAE  F007         	goto	l1032
  1142   000FCC  0A01               	xorlw	1	; case 1
  1143   000FCE  B4D8               	btfsc	status,2,c
  1144   000FD0  EFB2  F007         	goto	l1034
  1145   000FD4  0A03               	xorlw	3	; case 2
  1146   000FD6  B4D8               	btfsc	status,2,c
  1147   000FD8  EFB6  F007         	goto	l1036
  1148   000FDC  0A01               	xorlw	1	; case 3
  1149   000FDE  B4D8               	btfsc	status,2,c
  1150   000FE0  EFBA  F007         	goto	l1038
  1151   000FE4  0A07               	xorlw	7	; case 4
  1152   000FE6  B4D8               	btfsc	status,2,c
  1153   000FE8  EFBE  F007         	goto	l1040
  1154   000FEC  0A01               	xorlw	1	; case 5
  1155   000FEE  B4D8               	btfsc	status,2,c
  1156   000FF0  EFC2  F007         	goto	l1042
  1157   000FF4  0A03               	xorlw	3	; case 6
  1158   000FF6  B4D8               	btfsc	status,2,c
  1159   000FF8  EFC6  F007         	goto	l1044
  1160   000FFC  0A01               	xorlw	1	; case 7
  1161   000FFE  B4D8               	btfsc	status,2,c
  1162   001000  EFCA  F007         	goto	l1046
  1163   001004  0A0F               	xorlw	15	; case 8
  1164   001006  B4D8               	btfsc	status,2,c
  1165   001008  EFCE  F007         	goto	l1048
  1166   00100C  0A01               	xorlw	1	; case 9
  1167   00100E  B4D8               	btfsc	status,2,c
  1168   001010  EFD2  F007         	goto	l1050
  1169   001014  EF0C  F008         	goto	l1056
  1170   001018                     l1056:
  1171   001018  0E03               	movlw	3
  1172   00101A  6E02               	movwf	??_showTime^0,c
  1173   00101C  0E98               	movlw	152
  1174   00101E                     u277:
  1175   00101E  2EE8               	decfsz	wreg,f,c
  1176   001020  D7FE               	bra	u277
  1177   001022  2E02               	decfsz	??_showTime^0,f,c
  1178   001024  D7FC               	bra	u277
  1179   001026                     
  1180                           ;main.c: 127:     }
  1181   001026  4A06               	infsnz	showTime@j^0,f,c
  1182   001028  2A07               	incf	(showTime@j+1)^0,f,c
  1183   00102A  BE07               	btfsc	(showTime@j+1)^0,7,c
  1184   00102C  EF21  F008         	goto	u201
  1185   001030  5007               	movf	(showTime@j+1)^0,w,c
  1186   001032  E109               	bnz	u200
  1187   001034  0E04               	movlw	4
  1188   001036  5C06               	subwf	showTime@j^0,w,c
  1189   001038  A0D8               	btfss	status,0,c
  1190   00103A  EF21  F008         	goto	u201
  1191   00103E  EF23  F008         	goto	u200
  1192   001042                     u201:
  1193   001042  EF94  F007         	goto	l1028
  1194   001046                     u200:
  1195   001046                     l61:
  1196   001046  0012               	return		;funcret
  1197   001048                     __end_of_showTime:
  1198                           	callstack 0
  1199                           
  1200 ;; *************** function _getKey *****************
  1201 ;; Defined at:
  1202 ;;		line 47 in file "main.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;		None
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  keys           16    2[COMRAM] unsigned char [4][4]
  1207 ;;  idx             2   24[COMRAM] short 
  1208 ;;  row             2   22[COMRAM] short 
  1209 ;;  col             2   18[COMRAM] short 
  1210 ;;  pressed         1   21[COMRAM] _Bool 
  1211 ;;  key             1   20[COMRAM] unsigned char 
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      unsigned char 
  1214 ;; Registers used:
  1215 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1222 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1223 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1224 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1225 ;;Total ram usage:       26 bytes
  1226 ;; Hardware stack levels used: 1
  1227 ;; This function calls:
  1228 ;;		Nothing
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text2
  1235   001048                     __ptext2:
  1236                           	callstack 0
  1237   001048                     _getKey:
  1238                           	callstack 30
  1239   001048                     
  1240                           ;main.c: 48:     LATB = 0xFF;
  1241   001048  6884               	setf	132,c	;volatile
  1242   00104A                     
  1243                           ;main.c: 49:     char key = 'q';
  1244   00104A  0E71               	movlw	113
  1245   00104C  6E15               	movwf	getKey@key^0,c
  1246                           
  1247                           ;main.c: 50:     short idx = 0;
  1248   00104E  6A1A               	clrf	(getKey@idx+1)^0,c
  1249   001050  0E00               	movlw	0
  1250   001052  6E19               	movwf	getKey@idx^0,c
  1251   001054                     
  1252                           ;main.c: 51:     _Bool pressed = 0;
  1253   001054  6A16               	clrf	getKey@pressed^0,c
  1254   001056                     
  1255                           ;main.c: 52:     char keys[4][4] = {
  1256   001056  EE20  F02A         	lfsr	2,getKey@F10559
  1257   00105A  EE10  F003         	lfsr	1,getKey@keys
  1258   00105E  0E0F               	movlw	15
  1259   001060                     u11:
  1260   001060  CFDB FFE3          	movff	plusw2,plusw1
  1261   001064  06E8               	decf	wreg,f,c
  1262   001066  E2FC               	bc	u11
  1263   001068                     
  1264                           ;main.c: 58:     short row = -1;
  1265   001068  6817               	setf	getKey@row^0,c
  1266   00106A  6818               	setf	(getKey@row+1)^0,c
  1267   00106C                     
  1268                           ;main.c: 59:     short col = -1;
  1269   00106C  6813               	setf	getKey@col^0,c
  1270   00106E  6814               	setf	(getKey@col+1)^0,c
  1271                           
  1272                           ;main.c: 60:     while(idx<4){
  1273   001070  EF5C  F008         	goto	l880
  1274   001074                     l872:
  1275                           
  1276                           ;main.c: 61:         if(PORTB & 1<<(idx+4)){
  1277   001074  C019  F001         	movff	getKey@idx,??_getKey
  1278   001078  0E04               	movlw	4
  1279   00107A  2601               	addwf	??_getKey^0,f,c
  1280   00107C  0E01               	movlw	1
  1281   00107E  6E02               	movwf	(??_getKey+1)^0,c
  1282   001080  2A01               	incf	??_getKey^0,f,c
  1283   001082  EF45  F008         	goto	u24
  1284   001086                     u25:
  1285   001086  90D8               	bcf	status,0,c
  1286   001088  3602               	rlcf	(??_getKey+1)^0,f,c
  1287   00108A                     u24:
  1288   00108A  2E01               	decfsz	??_getKey^0,f,c
  1289   00108C  EF43  F008         	goto	u25
  1290   001090  5002               	movf	(??_getKey+1)^0,w,c
  1291   001092  148E               	andwf	142,w,c	;volatile
  1292   001094  0900               	iorlw	0
  1293   001096  B4D8               	btfsc	status,2,c
  1294   001098  EF50  F008         	goto	u31
  1295   00109C  EF52  F008         	goto	u30
  1296   0010A0                     u31:
  1297   0010A0  EF5A  F008         	goto	l878
  1298   0010A4                     u30:
  1299   0010A4                     
  1300                           ;main.c: 62:             row = idx;
  1301   0010A4  C019  F017         	movff	getKey@idx,getKey@row
  1302   0010A8  C01A  F018         	movff	getKey@idx+1,getKey@row+1
  1303   0010AC                     
  1304                           ;main.c: 63:             pressed = 1;
  1305   0010AC  0E01               	movlw	1
  1306   0010AE  6E16               	movwf	getKey@pressed^0,c
  1307                           
  1308                           ;main.c: 64:             break;
  1309   0010B0  EF6A  F008         	goto	l882
  1310   0010B4                     l878:
  1311                           
  1312                           ;main.c: 66:         idx++;
  1313   0010B4  4A19               	infsnz	getKey@idx^0,f,c
  1314   0010B6  2A1A               	incf	(getKey@idx+1)^0,f,c
  1315   0010B8                     l880:
  1316                           
  1317                           ;main.c: 60:     while(idx<4){
  1318   0010B8  BE1A               	btfsc	(getKey@idx+1)^0,7,c
  1319   0010BA  EF68  F008         	goto	u41
  1320   0010BE  501A               	movf	(getKey@idx+1)^0,w,c
  1321   0010C0  E109               	bnz	u40
  1322   0010C2  0E04               	movlw	4
  1323   0010C4  5C19               	subwf	getKey@idx^0,w,c
  1324   0010C6  A0D8               	btfss	status,0,c
  1325   0010C8  EF68  F008         	goto	u41
  1326   0010CC  EF6A  F008         	goto	u40
  1327   0010D0                     u41:
  1328   0010D0  EF3A  F008         	goto	l872
  1329   0010D4                     u40:
  1330   0010D4                     l882:
  1331                           
  1332                           ;main.c: 69:     if(pressed){
  1333   0010D4  5016               	movf	getKey@pressed^0,w,c
  1334   0010D6  B4D8               	btfsc	status,2,c
  1335   0010D8  EF70  F008         	goto	u51
  1336   0010DC  EF72  F008         	goto	u50
  1337   0010E0                     u51:
  1338   0010E0  EFC1  F008         	goto	l898
  1339   0010E4                     u50:
  1340   0010E4                     
  1341                           ;main.c: 70:         idx = 0;
  1342   0010E4  6A1A               	clrf	(getKey@idx+1)^0,c
  1343   0010E6  0E00               	movlw	0
  1344   0010E8  6E19               	movwf	getKey@idx^0,c
  1345                           
  1346                           ;main.c: 71:         while(idx<4){
  1347   0010EA  EFA9  F008         	goto	l892
  1348   0010EE                     l886:
  1349                           
  1350                           ;main.c: 72:             LATB |= 0x0F;
  1351   0010EE  0E0F               	movlw	15
  1352   0010F0  1284               	iorwf	132,f,c	;volatile
  1353                           
  1354                           ;main.c: 73:             LATB = LATB & ~(1<<idx);
  1355   0010F2  C019  F001         	movff	getKey@idx,??_getKey
  1356   0010F6  0E01               	movlw	1
  1357   0010F8  6E02               	movwf	(??_getKey+1)^0,c
  1358   0010FA  2A01               	incf	??_getKey^0,f,c
  1359   0010FC  EF82  F008         	goto	u64
  1360   001100                     u65:
  1361   001100  90D8               	bcf	status,0,c
  1362   001102  3602               	rlcf	(??_getKey+1)^0,f,c
  1363   001104                     u64:
  1364   001104  2E01               	decfsz	??_getKey^0,f,c
  1365   001106  EF80  F008         	goto	u65
  1366   00110A  5002               	movf	(??_getKey+1)^0,w,c
  1367   00110C  0AFF               	xorlw	255
  1368   00110E  1484               	andwf	132,w,c	;volatile
  1369   001110  6E84               	movwf	132,c	;volatile
  1370                           
  1371                           ;main.c: 74:             if(!(PORTB & (1<<row+4))){
  1372   001112  C017  F001         	movff	getKey@row,??_getKey
  1373   001116  0E04               	movlw	4
  1374   001118  2601               	addwf	??_getKey^0,f,c
  1375   00111A  0E01               	movlw	1
  1376   00111C  6E02               	movwf	(??_getKey+1)^0,c
  1377   00111E  2A01               	incf	??_getKey^0,f,c
  1378   001120  EF94  F008         	goto	u74
  1379   001124                     u75:
  1380   001124  90D8               	bcf	status,0,c
  1381   001126  3602               	rlcf	(??_getKey+1)^0,f,c
  1382   001128                     u74:
  1383   001128  2E01               	decfsz	??_getKey^0,f,c
  1384   00112A  EF92  F008         	goto	u75
  1385   00112E  5002               	movf	(??_getKey+1)^0,w,c
  1386   001130  148E               	andwf	142,w,c	;volatile
  1387   001132  0900               	iorlw	0
  1388   001134  A4D8               	btfss	status,2,c
  1389   001136  EF9F  F008         	goto	u81
  1390   00113A  EFA1  F008         	goto	u80
  1391   00113E                     u81:
  1392   00113E  EFA7  F008         	goto	l890
  1393   001142                     u80:
  1394   001142                     
  1395                           ;main.c: 75:                 col = idx;
  1396   001142  C019  F013         	movff	getKey@idx,getKey@col
  1397   001146  C01A  F014         	movff	getKey@idx+1,getKey@col+1
  1398                           
  1399                           ;main.c: 76:                 break;
  1400   00114A  EFB7  F008         	goto	l894
  1401   00114E                     l890:
  1402                           
  1403                           ;main.c: 78:             idx++;
  1404   00114E  4A19               	infsnz	getKey@idx^0,f,c
  1405   001150  2A1A               	incf	(getKey@idx+1)^0,f,c
  1406   001152                     l892:
  1407                           
  1408                           ;main.c: 71:         while(idx<4){
  1409   001152  BE1A               	btfsc	(getKey@idx+1)^0,7,c
  1410   001154  EFB5  F008         	goto	u91
  1411   001158  501A               	movf	(getKey@idx+1)^0,w,c
  1412   00115A  E109               	bnz	u90
  1413   00115C  0E04               	movlw	4
  1414   00115E  5C19               	subwf	getKey@idx^0,w,c
  1415   001160  A0D8               	btfss	status,0,c
  1416   001162  EFB5  F008         	goto	u91
  1417   001166  EFB7  F008         	goto	u90
  1418   00116A                     u91:
  1419   00116A  EF77  F008         	goto	l886
  1420   00116E                     u90:
  1421   00116E                     l894:
  1422                           
  1423                           ;main.c: 83:         return keys[col][row];
  1424   00116E  5013               	movf	getKey@col^0,w,c
  1425   001170  0D04               	mullw	4
  1426   001172  50F3               	movf	243,w,c
  1427   001174  0F03               	addlw	low getKey@keys
  1428   001176  2417               	addwf	getKey@row^0,w,c
  1429   001178  6ED9               	movwf	fsr2l,c
  1430   00117A  6ADA               	clrf	fsr2h,c
  1431   00117C  50DF               	movf	indf2,w,c
  1432   00117E  EFC2  F008         	goto	l44
  1433   001182                     l898:
  1434                           
  1435                           ;main.c: 85:     return key;
  1436   001182  5015               	movf	getKey@key^0,w,c
  1437   001184                     l44:
  1438   001184  0012               	return		;funcret
  1439   001186                     __end_of_getKey:
  1440                           	callstack 0
  1441                           
  1442                           	psect	smallconst
  1443   000F00                     __psmallconst:
  1444                           	callstack 0
  1445   000F00  00                 	db	0
  1446   000F01  00                 	db	0	; dummy byte at the end
  1447   000F00                     __smallconst    set	__psmallconst
  1448   000F00                     __mediumconst   set	__psmallconst
  1449   000003                     __activetblptr  equ	3
  1450                           
  1451                           	psect	rparam
  1452   000001                     ___rparam_used  equ	1
  1453   000000                     ___param_bank   equ	0
  1454   000000                     __Lparam        equ	__Lrparam
  1455   000000                     __Hparam        equ	__Hrparam
  1456                           
  1457                           	psect	idloc
  1458                           
  1459                           ;Config register IDLOC0 @ 0x200000
  1460                           ;	unspecified, using default values
  1461   200000                     	org	2097152
  1462   200000  FFFF               	dw	65535
  1463                           
  1464                           ;Config register IDLOC1 @ 0x200002
  1465                           ;	unspecified, using default values
  1466   200002                     	org	2097154
  1467   200002  FFFF               	dw	65535
  1468                           
  1469                           ;Config register IDLOC2 @ 0x200004
  1470                           ;	unspecified, using default values
  1471   200004                     	org	2097156
  1472   200004  FFFF               	dw	65535
  1473                           
  1474                           ;Config register IDLOC3 @ 0x200006
  1475                           ;	unspecified, using default values
  1476   200006                     	org	2097158
  1477   200006  FFFF               	dw	65535
  1478                           
  1479                           ;Config register IDLOC4 @ 0x200008
  1480                           ;	unspecified, using default values
  1481   200008                     	org	2097160
  1482   200008  FFFF               	dw	65535
  1483                           
  1484                           ;Config register IDLOC5 @ 0x20000A
  1485                           ;	unspecified, using default values
  1486   20000A                     	org	2097162
  1487   20000A  FFFF               	dw	65535
  1488                           
  1489                           ;Config register IDLOC6 @ 0x20000C
  1490                           ;	unspecified, using default values
  1491   20000C                     	org	2097164
  1492   20000C  FFFF               	dw	65535
  1493                           
  1494                           ;Config register IDLOC7 @ 0x20000E
  1495                           ;	unspecified, using default values
  1496   20000E                     	org	2097166
  1497   20000E  FFFF               	dw	65535
  1498                           
  1499                           	psect	config
  1500                           
  1501                           ;Config register CONFIG1L @ 0x300000
  1502                           ;	External Oscillator mode Selection bits
  1503                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1504                           ;	Power-up default value for COSC bits
  1505                           ;	RSTOSC = EXTOSC, EXTOSC operating per FEXTOSC bits (device manufacturing default)
  1506   300000                     	org	3145728
  1507   300000  FA                 	db	250
  1508                           
  1509                           ;Config register CONFIG1H @ 0x300001
  1510                           ;	Clock Out Enable bit
  1511                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  1512                           ;	Clock Switch Enable bit
  1513                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  1514                           ;	Fail-Safe Clock Monitor Enable bit
  1515                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  1516   300001                     	org	3145729
  1517   300001  FF                 	db	255
  1518                           
  1519                           ;Config register CONFIG2L @ 0x300002
  1520                           ;	Master Clear Enable bit
  1521                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  1522                           ;	Power-up Timer Enable bit
  1523                           ;	PWRTE = OFF, Power up timer disabled
  1524                           ;	Low-power BOR enable bit
  1525                           ;	LPBOREN = OFF, ULPBOR disabled
  1526                           ;	Brown-out Reset Enable bits
  1527                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  1528   300002                     	org	3145730
  1529   300002  FF                 	db	255
  1530                           
  1531                           ;Config register CONFIG2H @ 0x300003
  1532                           ;	Brown Out Reset Voltage selection bits
  1533                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  1534                           ;	ZCD Disable bit
  1535                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  1536                           ;	PPSLOCK bit One-Way Set Enable bit
  1537                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
  1538                           ;	Stack Full/Underflow Reset Enable bit
  1539                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1540                           ;	Debugger Enable bit
  1541                           ;	DEBUG = OFF, Background debugger disabled
  1542                           ;	Extended Instruction Set Enable bit
  1543                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  1544   300003                     	org	3145731
  1545   300003  FF                 	db	255
  1546                           
  1547                           ;Config register CONFIG3L @ 0x300004
  1548                           ;	WDT Period Select bits
  1549                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  1550                           ;	WDT operating mode
  1551                           ;	WDTE = OFF, WDT Disabled
  1552   300004                     	org	3145732
  1553   300004  9F                 	db	159
  1554                           
  1555                           ;Config register CONFIG3H @ 0x300005
  1556                           ;	WDT Window Select bits
  1557                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  1558                           ;	WDT input clock selector
  1559                           ;	WDTCCS = SC, Software Control
  1560   300005                     	org	3145733
  1561   300005  FF                 	db	255
  1562                           
  1563                           ;Config register CONFIG4L @ 0x300006
  1564                           ;	unspecified, using default values
  1565                           ;	Write Protection Block 0
  1566                           ;	WRT0 = 0x1, unprogrammed default
  1567                           ;	Write Protection Block 1
  1568                           ;	WRT1 = 0x1, unprogrammed default
  1569                           ;	Write Protection Block 2
  1570                           ;	WRT2 = 0x1, unprogrammed default
  1571                           ;	Write Protection Block 3
  1572                           ;	WRT3 = 0x1, unprogrammed default
  1573                           ;	Write Protection Block 3
  1574                           ;	WRT4 = 0x1, unprogrammed default
  1575                           ;	Write Protection Block 3
  1576                           ;	WRT5 = 0x1, unprogrammed default
  1577                           ;	Write Protection Block 3
  1578                           ;	WRT6 = 0x1, unprogrammed default
  1579                           ;	Write Protection Block 3
  1580                           ;	WRT7 = 0x1, unprogrammed default
  1581   300006                     	org	3145734
  1582   300006  FF                 	db	255
  1583                           
  1584                           ;Config register CONFIG4H @ 0x300007
  1585                           ;	Configuration Register Write Protection bit
  1586                           ;	WRTC = 0x1, unprogrammed default
  1587                           ;	Boot Block Write Protection bit
  1588                           ;	WRTB = 0x1, unprogrammed default
  1589                           ;	Data EEPROM Write Protection bit
  1590                           ;	WRTD = 0x1, unprogrammed default
  1591                           ;	Scanner Enable bit
  1592                           ;	SCANE = 0x1, unprogrammed default
  1593                           ;	Low Voltage Programming Enable bit
  1594                           ;	LVP = OFF, HV on MCLR/VPP must be used for programming
  1595   300007                     	org	3145735
  1596   300007  DF                 	db	223
  1597                           
  1598                           ;Config register CONFIG5L @ 0x300008
  1599                           ;	unspecified, using default values
  1600                           ;	UserNVM Program Memory Code Protection bit
  1601                           ;	CP = 0x1, unprogrammed default
  1602                           ;	DataNVM Memory Code Protection bit
  1603                           ;	CPD = 0x1, unprogrammed default
  1604   300008                     	org	3145736
  1605   300008  FF                 	db	255
  1606                           
  1607                           ;Config register CONFIG5H @ 0x300009
  1608                           ;	unspecified, using default values
  1609   300009                     	org	3145737
  1610   300009  FF                 	db	255
  1611                           
  1612                           ;Config register CONFIG6L @ 0x30000A
  1613                           ;	unspecified, using default values
  1614                           ;	Table Read Protection Block 0
  1615                           ;	EBTR0 = 0x1, unprogrammed default
  1616                           ;	Table Read Protection Block 1
  1617                           ;	EBTR1 = 0x1, unprogrammed default
  1618                           ;	Table Read Protection Block 2
  1619                           ;	EBTR2 = 0x1, unprogrammed default
  1620                           ;	Table Read Protection Block 3
  1621                           ;	EBTR3 = 0x1, unprogrammed default
  1622                           ;	Table Read Protection Block 4
  1623                           ;	EBTR4 = 0x1, unprogrammed default
  1624                           ;	Table Read Protection Block 5
  1625                           ;	EBTR5 = 0x1, unprogrammed default
  1626                           ;	Table Read Protection Block 6
  1627                           ;	EBTR6 = 0x1, unprogrammed default
  1628                           ;	Table Read Protection Block 7
  1629                           ;	EBTR7 = 0x1, unprogrammed default
  1630   30000A                     	org	3145738
  1631   30000A  FF                 	db	255
  1632                           
  1633                           ;Config register CONFIG6H @ 0x30000B
  1634                           ;	unspecified, using default values
  1635                           ;	Boot Block Table Read Protection bit
  1636                           ;	EBTRB = 0x1, unprogrammed default
  1637   30000B                     	org	3145739
  1638   30000B  FF                 	db	255
  1639                           tosu	equ	0xFFF
  1640                           tosh	equ	0xFFE
  1641                           tosl	equ	0xFFD
  1642                           stkptr	equ	0xFFC
  1643                           pclatu	equ	0xFFB
  1644                           pclath	equ	0xFFA
  1645                           pcl	equ	0xFF9
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodh	equ	0xFF4
  1651                           prodl	equ	0xFF3
  1652                           indf0	equ	0xFEF
  1653                           postinc0	equ	0xFEE
  1654                           postdec0	equ	0xFED
  1655                           preinc0	equ	0xFEC
  1656                           plusw0	equ	0xFEB
  1657                           fsr0h	equ	0xFEA
  1658                           fsr0l	equ	0xFE9
  1659                           wreg	equ	0xFE8
  1660                           indf1	equ	0xFE7
  1661                           postinc1	equ	0xFE6
  1662                           postdec1	equ	0xFE5
  1663                           preinc1	equ	0xFE4
  1664                           plusw1	equ	0xFE3
  1665                           fsr1h	equ	0xFE2
  1666                           fsr1l	equ	0xFE1
  1667                           bsr	equ	0xFE0
  1668                           indf2	equ	0xFDF
  1669                           postinc2	equ	0xFDE
  1670                           postdec2	equ	0xFDD
  1671                           preinc2	equ	0xFDC
  1672                           plusw2	equ	0xFDB
  1673                           fsr2h	equ	0xFDA
  1674                           fsr2l	equ	0xFD9
  1675                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      67
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    showTime@time	PTR short  size(1) Largest target is 8
		 -> main@nums(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_getKey

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0     618
                                             26 COMRAM    15    15      0
                             _getKey
                           _showTime
 ---------------------------------------------------------------------------------
 (1) _showTime                                             7     6      1     137
                                              0 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 (1) _getKey                                              26    26      0     180
                                              0 COMRAM    26    26      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _getKey
   _showTime

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3719      0       0      0.0%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBANK14          136      0       0      0.0%
BANK14             136      0       0      0.0%
BITBIGSFRlll       132      0       0      0.0%
BITBIGSFRllh       113      0       0      0.0%
BITBIGSFRh         113      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95     41      67     70.5%
BITBIGSFRlh         10      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      67      0.0%


Microchip Technology PIC18 Macro Assembler V3.10 build 20250813170317 
Symbol Table                                                                                   Wed Oct  8 15:14:17 2025

                      _i 0042                       l44 1184                       l61 1046  
                     u11 1060                       u30 10A4                       u31 10A0  
                     u40 10D4                       u24 108A                       u41 10D0  
                     u25 1086                       u50 10E4                       u51 10E0  
                     u80 1142                       u64 1104                       u81 113E  
                     u65 1100                       u90 116E                       u74 1128  
                     u91 116A                       u75 1124                      l860 1048  
                    l870 106C                      l862 104A                      l872 1074  
                    l880 10B8                      l864 1054                      l890 114E  
                    l882 10D4                      l874 10A4                      l866 1056  
                    l892 1152                      l884 10E4                      l876 10AC  
                    l868 1068                      l894 116E                      l886 10EE  
                    l878 10B4                      l888 1142                      l898 1182  
                    u200 1046                      u201 1042                      u211 119A  
                    u220 11D6                      u221 11D2                      u230 11E6  
                    u231 11E2                      u240 11F8                      u241 11F4  
                    u250 1246                      u251 1242                      u180 0F24  
                    u181 0F20                      u194 0F4E                      u195 0F4A  
                    u267 1268                      u277 101E                      wreg 0FE8  
                   l1100 11F8                     l1030 0F3C                     l1022 0F02  
                   l1110 122C                     l1040 0F7C                     l1032 0F5C  
                   l1024 0F08                     l1120 1262                     l1112 1246  
                   l1050 0FA4                     l1042 0F84                     l1034 0F64  
                   l1114 1252                     l1106 11FE                     l1044 0F8C  
                   l1036 0F6C                     l1028 0F28                     l1108 1226  
                   l1116 1256                     l1142 0FC2                     l1046 0F94  
                   l1038 0F74                     l1054 0FAC                     l1118 125A  
                   l1070 11A4                     l1048 0F9C                     l1056 1018  
                   l1080 11B0                     l1072 11A6                     l1064 1186  
                   l1058 1026                     l1090 11BE                     l1082 11B2  
                   l1074 11A8                     l1066 1194                     l1092 11C0  
                   l1084 11B4                     l1076 11AA                     l1068 11A0  
                   l1094 11C6                     l1086 11B6                     l1078 11AC  
                   l1096 11D6                     l1088 11BA                     l1098 11E6  
                   _LATA 0F83                     _LATB 0F84                     _LATC 0F85  
                   _LATD 0F86                     _main 1186                     fsr1h 0FE2  
                   fsr2h 0FDA                     indf2 0FDF                     fsr1l 0FE1  
                   fsr2l 0FD9                     prodl 0FF3                     start FFFC  
           ___param_bank 0000                    ?_main 0001                    _PORTB 0F8E  
           main@last_key 0026                    _TRISA 0F88                    _TRISB 0F89  
                  _TRISC 0F8A                    _TRISD 0F8B                    main@i 0027  
                  tablat 0FF5                    plusw1 0FE3                    plusw2 0FDB  
                  status 0FD8          __initialization 1278             __end_of_main 1278  
                 ??_main 001B            __activetblptr 0003                   _ANSELA 0F11  
                 _ANSELB 0F19                   _ANSELC 0F21                   _ANSELD 0F26  
                 _getKey 1048                   clear_0 129E                   isa$std 0001  
           __pdataCOMRAM 002A         __end_of_showTime 1048             __mediumconst 0F00  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
             __accesstop 0060  __end_of__initialization 12A4            ___rparam_used 0001  
         __pcstackCOMRAM 0001                  ?_getKey 0001                  __Hparam 0000  
                __Lparam 0000                ?_showTime 0001             __psmallconst 0F00  
                __pcinit 1278                  __ramtop 0F00                  __ptext0 1186  
                __ptext1 0F02                  __ptext2 1048                  main@key 0029  
   end_of_initialization 12A4               getKey@keys 0003               ??_showTime 0002  
                postdec1 0FE5                  postdec2 0FDD                  postinc0 0FEE  
                postinc1 0FE6                  postinc2 0FDE               main@F10575 003A  
            showTime@num 0004            __pidataCOMRAM 12AA           __end_of_getKey 1186  
    start_initialization 1278                 ??_getKey 0001              __pbssCOMRAM 003A  
            __smallconst 0F00            getKey@pressed 0016                getKey@col 0013  
              getKey@idx 0019                getKey@key 0015                getKey@row 0017  
              copy_data0 128C                 __Hrparam 0000                 __Lrparam 0000  
           getKey@F10559 002A                 isa$xinst 0000                 _showTime 0F02  
              showTime@j 0006                 main@time 001C                 main@nums 001E  
           showTime@time 0001  
