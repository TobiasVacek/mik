

Microchip MPLAB XC8 Assembler V3.10 build 20250813170317 
                                                                                               Wed Oct  8 15:08:02 2025

Microchip MPLAB XC8 C Compiler v3.10 (Free license) build 20250813170317 Og1 
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18   000000                     
    19                           ; Generated 09/02/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F47K40 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53   000FE0                     bsr             equ	4064
    54   000FE9                     fsr0            equ	4073
    55   000FEA                     fsr0h           equ	4074
    56   000FE9                     fsr0l           equ	4073
    57   000FE1                     fsr1            equ	4065
    58   000FE2                     fsr1h           equ	4066
    59   000FE1                     fsr1l           equ	4065
    60   000FD9                     fsr2            equ	4057
    61   000FDA                     fsr2h           equ	4058
    62   000FD9                     fsr2l           equ	4057
    63   000FEF                     indf0           equ	4079
    64   000FE7                     indf1           equ	4071
    65   000FDF                     indf2           equ	4063
    66   000FF2                     intcon          equ	4082
    67   000F81                     nvmcon          equ	3969
    68   000FF9                     pcl             equ	4089
    69   000FFA                     pclath          equ	4090
    70   000FFB                     pclatu          equ	4091
    71   000FEB                     plusw0          equ	4075
    72   000FE3                     plusw1          equ	4067
    73   000FDB                     plusw2          equ	4059
    74   000FED                     postdec0        equ	4077
    75   000FE5                     postdec1        equ	4069
    76   000FDD                     postdec2        equ	4061
    77   000FEE                     postinc0        equ	4078
    78   000FE6                     postinc1        equ	4070
    79   000FDE                     postinc2        equ	4062
    80   000FEC                     preinc0         equ	4076
    81   000FE4                     preinc1         equ	4068
    82   000FDC                     preinc2         equ	4060
    83   000FF3                     prod            equ	4083
    84   000FF4                     prodh           equ	4084
    85   000FF3                     prodl           equ	4083
    86   000FD8                     status          equ	4056
    87   000FF5                     tablat          equ	4085
    88   000FF6                     tblptr          equ	4086
    89   000FF7                     tblptrh         equ	4087
    90   000FF6                     tblptrl         equ	4086
    91   000FF8                     tblptru         equ	4088
    92   000FFD                     tosl            equ	4093
    93   000FE8                     wreg            equ	4072
    94   000E8D                     RX2PPS          equ	3725	;# 
    95   000E8E                     CK2PPS          equ	3726	;# 
    96   000E8E                     TX2PPS          equ	3726	;# 
    97   000E8F                     SSP2CLKPPS      equ	3727	;# 
    98   000E90                     SSP2DATPPS      equ	3728	;# 
    99   000E91                     SSP2SSPPS       equ	3729	;# 
   100   000E92                     SSP2BUF         equ	3730	;# 
   101   000E93                     SSP2ADD         equ	3731	;# 
   102   000E94                     SSP2MSK         equ	3732	;# 
   103   000E95                     SSP2STAT        equ	3733	;# 
   104   000E96                     SSP2CON1        equ	3734	;# 
   105   000E97                     SSP2CON2        equ	3735	;# 
   106   000E98                     SSP2CON3        equ	3736	;# 
   107   000E99                     RC2REG          equ	3737	;# 
   108   000E99                     RCREG2          equ	3737	;# 
   109   000E9A                     TX2REG          equ	3738	;# 
   110   000E9A                     TXREG2          equ	3738	;# 
   111   000E9B                     SP2BRG          equ	3739	;# 
   112   000E9B                     SP2BRGL         equ	3739	;# 
   113   000E9B                     SPBRG2          equ	3739	;# 
   114   000E9C                     SP2BRGH         equ	3740	;# 
   115   000E9C                     SPBRGH2         equ	3740	;# 
   116   000E9D                     RC2STA          equ	3741	;# 
   117   000E9D                     RCSTA2          equ	3741	;# 
   118   000E9E                     TX2STA          equ	3742	;# 
   119   000E9E                     TXSTA2          equ	3742	;# 
   120   000E9F                     BAUD2CON        equ	3743	;# 
   121   000E9F                     BAUDCON2        equ	3743	;# 
   122   000E9F                     BAUDCTL2        equ	3743	;# 
   123   000EA0                     PPSLOCK         equ	3744	;# 
   124   000EA1                     INT0PPS         equ	3745	;# 
   125   000EA2                     INT1PPS         equ	3746	;# 
   126   000EA3                     INT2PPS         equ	3747	;# 
   127   000EA4                     T0CKIPPS        equ	3748	;# 
   128   000EA5                     T1CKIPPS        equ	3749	;# 
   129   000EA6                     T1GPPS          equ	3750	;# 
   130   000EA7                     T3CKIPPS        equ	3751	;# 
   131   000EA8                     T3GPPS          equ	3752	;# 
   132   000EA9                     T5CKIPPS        equ	3753	;# 
   133   000EAA                     T5GPPS          equ	3754	;# 
   134   000EAB                     T2INPPS         equ	3755	;# 
   135   000EAC                     T4INPPS         equ	3756	;# 
   136   000EAD                     T6INPPS         equ	3757	;# 
   137   000EAE                     ADACTPPS        equ	3758	;# 
   138   000EAF                     CCP1PPS         equ	3759	;# 
   139   000EB0                     CCP2PPS         equ	3760	;# 
   140   000EB1                     CWG1PPS         equ	3761	;# 
   141   000EB1                     CWGINPPS        equ	3761	;# 
   142   000EB2                     MDCARLPPS       equ	3762	;# 
   143   000EB3                     MDCARHPPS       equ	3763	;# 
   144   000EB4                     MDSRCPPS        equ	3764	;# 
   145   000EB5                     RX1PPS          equ	3765	;# 
   146   000EB5                     RXPPS           equ	3765	;# 
   147   000EB6                     CK1PPS          equ	3766	;# 
   148   000EB6                     TX1PPS          equ	3766	;# 
   149   000EB6                     CKPPS           equ	3766	;# 
   150   000EB6                     TXPPS           equ	3766	;# 
   151   000EB7                     SSP1CLKPPS      equ	3767	;# 
   152   000EB7                     SSPCLKPPS       equ	3767	;# 
   153   000EB8                     SSP1DATPPS      equ	3768	;# 
   154   000EB8                     SSPDATPPS       equ	3768	;# 
   155   000EB9                     SSP1SSPPS       equ	3769	;# 
   156   000EB9                     SSPSSPPS        equ	3769	;# 
   157   000EBA                     IPR0            equ	3770	;# 
   158   000EBB                     IPR1            equ	3771	;# 
   159   000EBC                     IPR2            equ	3772	;# 
   160   000EBD                     IPR3            equ	3773	;# 
   161   000EBE                     IPR4            equ	3774	;# 
   162   000EBF                     IPR5            equ	3775	;# 
   163   000EC0                     IPR6            equ	3776	;# 
   164   000EC1                     IPR7            equ	3777	;# 
   165   000EC2                     PIE0            equ	3778	;# 
   166   000EC3                     PIE1            equ	3779	;# 
   167   000EC4                     PIE2            equ	3780	;# 
   168   000EC5                     PIE3            equ	3781	;# 
   169   000EC6                     PIE4            equ	3782	;# 
   170   000EC7                     PIE5            equ	3783	;# 
   171   000EC8                     PIE6            equ	3784	;# 
   172   000EC9                     PIE7            equ	3785	;# 
   173   000ECA                     PIR0            equ	3786	;# 
   174   000ECB                     PIR1            equ	3787	;# 
   175   000ECC                     PIR2            equ	3788	;# 
   176   000ECD                     PIR3            equ	3789	;# 
   177   000ECE                     PIR4            equ	3790	;# 
   178   000ECF                     PIR5            equ	3791	;# 
   179   000ED0                     PIR6            equ	3792	;# 
   180   000ED1                     PIR7            equ	3793	;# 
   181   000ED2                     WDTCON0         equ	3794	;# 
   182   000ED3                     WDTCON1         equ	3795	;# 
   183   000ED4                     WDTPSL          equ	3796	;# 
   184   000ED5                     WDTPSH          equ	3797	;# 
   185   000ED6                     WDTTMR          equ	3798	;# 
   186   000ED7                     CPUDOZE         equ	3799	;# 
   187   000ED8                     OSCCON1         equ	3800	;# 
   188   000ED9                     OSCCON2         equ	3801	;# 
   189   000EDA                     OSCCON3         equ	3802	;# 
   190   000EDB                     OSCSTAT         equ	3803	;# 
   191   000EDB                     OSCSTAT1        equ	3803	;# 
   192   000EDC                     OSCEN           equ	3804	;# 
   193   000EDD                     OSCTUNE         equ	3805	;# 
   194   000EDE                     OSCFRQ          equ	3806	;# 
   195   000EDF                     VREGCON         equ	3807	;# 
   196   000EE0                     BORCON          equ	3808	;# 
   197   000EE1                     PMD0            equ	3809	;# 
   198   000EE2                     PMD1            equ	3810	;# 
   199   000EE3                     PMD2            equ	3811	;# 
   200   000EE4                     PMD3            equ	3812	;# 
   201   000EE5                     PMD4            equ	3813	;# 
   202   000EE6                     PMD5            equ	3814	;# 
   203   000EE7                     RA0PPS          equ	3815	;# 
   204   000EE8                     RA1PPS          equ	3816	;# 
   205   000EE9                     RA2PPS          equ	3817	;# 
   206   000EEA                     RA3PPS          equ	3818	;# 
   207   000EEB                     RA4PPS          equ	3819	;# 
   208   000EEC                     RA5PPS          equ	3820	;# 
   209   000EED                     RA6PPS          equ	3821	;# 
   210   000EEE                     RA7PPS          equ	3822	;# 
   211   000EEF                     RB0PPS          equ	3823	;# 
   212   000EF0                     RB1PPS          equ	3824	;# 
   213   000EF1                     RB2PPS          equ	3825	;# 
   214   000EF2                     RB3PPS          equ	3826	;# 
   215   000EF3                     RB4PPS          equ	3827	;# 
   216   000EF4                     RB5PPS          equ	3828	;# 
   217   000EF5                     RB6PPS          equ	3829	;# 
   218   000EF6                     RB7PPS          equ	3830	;# 
   219   000EF7                     RC0PPS          equ	3831	;# 
   220   000EF8                     RC1PPS          equ	3832	;# 
   221   000EF9                     RC2PPS          equ	3833	;# 
   222   000EFA                     RC3PPS          equ	3834	;# 
   223   000EFB                     RC4PPS          equ	3835	;# 
   224   000EFC                     RC5PPS          equ	3836	;# 
   225   000EFD                     RC6PPS          equ	3837	;# 
   226   000EFE                     RC7PPS          equ	3838	;# 
   227   000EFF                     RD0PPS          equ	3839	;# 
   228   000F00                     RD1PPS          equ	3840	;# 
   229   000F01                     RD2PPS          equ	3841	;# 
   230   000F02                     RD3PPS          equ	3842	;# 
   231   000F03                     RD4PPS          equ	3843	;# 
   232   000F04                     RD5PPS          equ	3844	;# 
   233   000F05                     RD6PPS          equ	3845	;# 
   234   000F06                     RD7PPS          equ	3846	;# 
   235   000F07                     RE0PPS          equ	3847	;# 
   236   000F08                     RE1PPS          equ	3848	;# 
   237   000F09                     RE2PPS          equ	3849	;# 
   238   000F0A                     IOCAF           equ	3850	;# 
   239   000F0B                     IOCAN           equ	3851	;# 
   240   000F0C                     IOCAP           equ	3852	;# 
   241   000F0D                     INLVLA          equ	3853	;# 
   242   000F0E                     SLRCONA         equ	3854	;# 
   243   000F0F                     ODCONA          equ	3855	;# 
   244   000F10                     WPUA            equ	3856	;# 
   245   000F11                     ANSELA          equ	3857	;# 
   246   000F12                     IOCBF           equ	3858	;# 
   247   000F13                     IOCBN           equ	3859	;# 
   248   000F14                     IOCBP           equ	3860	;# 
   249   000F15                     INLVLB          equ	3861	;# 
   250   000F16                     SLRCONB         equ	3862	;# 
   251   000F17                     ODCONB          equ	3863	;# 
   252   000F18                     WPUB            equ	3864	;# 
   253   000F19                     ANSELB          equ	3865	;# 
   254   000F1A                     IOCCF           equ	3866	;# 
   255   000F1B                     IOCCN           equ	3867	;# 
   256   000F1C                     IOCCP           equ	3868	;# 
   257   000F1D                     INLVLC          equ	3869	;# 
   258   000F1E                     SLRCONC         equ	3870	;# 
   259   000F1F                     ODCONC          equ	3871	;# 
   260   000F20                     WPUC            equ	3872	;# 
   261   000F21                     ANSELC          equ	3873	;# 
   262   000F22                     INLVLD          equ	3874	;# 
   263   000F23                     SLRCOND         equ	3875	;# 
   264   000F24                     ODCOND          equ	3876	;# 
   265   000F25                     WPUD            equ	3877	;# 
   266   000F26                     ANSELD          equ	3878	;# 
   267   000F27                     IOCEF           equ	3879	;# 
   268   000F28                     IOCEN           equ	3880	;# 
   269   000F29                     IOCEP           equ	3881	;# 
   270   000F2A                     INLVLE          equ	3882	;# 
   271   000F2B                     SLRCONE         equ	3883	;# 
   272   000F2C                     ODCONE          equ	3884	;# 
   273   000F2D                     WPUE            equ	3885	;# 
   274   000F2E                     ANSELE          equ	3886	;# 
   275   000F2F                     HLVDCON0        equ	3887	;# 
   276   000F30                     HLVDCON1        equ	3888	;# 
   277   000F31                     FVRCON          equ	3889	;# 
   278   000F32                     ZCDCON          equ	3890	;# 
   279   000F33                     DAC1CON0        equ	3891	;# 
   280   000F34                     DAC1CON1        equ	3892	;# 
   281   000F35                     CM2CON0         equ	3893	;# 
   282   000F36                     CM2CON1         equ	3894	;# 
   283   000F37                     CM2NCH          equ	3895	;# 
   284   000F38                     CM2PCH          equ	3896	;# 
   285   000F39                     CM1CON0         equ	3897	;# 
   286   000F3A                     CM1CON1         equ	3898	;# 
   287   000F3B                     CM1NCH          equ	3899	;# 
   288   000F3C                     CM1PCH          equ	3900	;# 
   289   000F3D                     CMOUT           equ	3901	;# 
   290   000F3E                     CLKRCON         equ	3902	;# 
   291   000F3F                     CLKRCLK         equ	3903	;# 
   292   000F40                     CWG1CLK         equ	3904	;# 
   293   000F40                     CWG1CLKCON      equ	3904	;# 
   294   000F41                     CWG1ISM         equ	3905	;# 
   295   000F42                     CWG1DBR         equ	3906	;# 
   296   000F43                     CWG1DBF         equ	3907	;# 
   297   000F44                     CWG1CON0        equ	3908	;# 
   298   000F45                     CWG1CON1        equ	3909	;# 
   299   000F46                     CWG1AS0         equ	3910	;# 
   300   000F47                     CWG1AS1         equ	3911	;# 
   301   000F48                     CWG1STR         equ	3912	;# 
   302   000F49                     SCANLADR        equ	3913	;# 
   303   000F49                     SCANLADRL       equ	3913	;# 
   304   000F4A                     SCANLADRH       equ	3914	;# 
   305   000F4B                     SCANLADRU       equ	3915	;# 
   306   000F4C                     SCANHADR        equ	3916	;# 
   307   000F4C                     SCANHADRL       equ	3916	;# 
   308   000F4D                     SCANHADRH       equ	3917	;# 
   309   000F4E                     SCANHADRU       equ	3918	;# 
   310   000F4F                     SCANCON0        equ	3919	;# 
   311   000F50                     SCANTRIG        equ	3920	;# 
   312   000F51                     MDCON0          equ	3921	;# 
   313   000F52                     MDCON1          equ	3922	;# 
   314   000F53                     MDSRC           equ	3923	;# 
   315   000F54                     MDCARL          equ	3924	;# 
   316   000F55                     MDCARH          equ	3925	;# 
   317   000F56                     ADACT           equ	3926	;# 
   318   000F57                     ADCLK           equ	3927	;# 
   319   000F58                     ADREF           equ	3928	;# 
   320   000F59                     ADCON1          equ	3929	;# 
   321   000F5A                     ADCON2          equ	3930	;# 
   322   000F5B                     ADCON3          equ	3931	;# 
   323   000F5C                     ADACQ           equ	3932	;# 
   324   000F5D                     ADCAP           equ	3933	;# 
   325   000F5E                     ADPRE           equ	3934	;# 
   326   000F5F                     ADPCH           equ	3935	;# 
   327   000F60                     ADCON0          equ	3936	;# 
   328   000F61                     ADPREV          equ	3937	;# 
   329   000F61                     ADPREVL         equ	3937	;# 
   330   000F62                     ADPREVH         equ	3938	;# 
   331   000F63                     ADRES           equ	3939	;# 
   332   000F63                     ADRESL          equ	3939	;# 
   333   000F64                     ADRESH          equ	3940	;# 
   334   000F65                     ADSTAT          equ	3941	;# 
   335   000F66                     ADRPT           equ	3942	;# 
   336   000F67                     ADCNT           equ	3943	;# 
   337   000F68                     ADSTPT          equ	3944	;# 
   338   000F68                     ADSTPTL         equ	3944	;# 
   339   000F69                     ADSTPTH         equ	3945	;# 
   340   000F6A                     ADLTH           equ	3946	;# 
   341   000F6A                     ADLTHL          equ	3946	;# 
   342   000F6B                     ADLTHH          equ	3947	;# 
   343   000F6C                     ADUTH           equ	3948	;# 
   344   000F6C                     ADUTHL          equ	3948	;# 
   345   000F6D                     ADUTHH          equ	3949	;# 
   346   000F6E                     ADERR           equ	3950	;# 
   347   000F6E                     ADERRL          equ	3950	;# 
   348   000F6F                     ADERRH          equ	3951	;# 
   349   000F70                     ADACC           equ	3952	;# 
   350   000F70                     ADACCL          equ	3952	;# 
   351   000F71                     ADACCH          equ	3953	;# 
   352   000F72                     ADFLTR          equ	3954	;# 
   353   000F72                     ADFLTRL         equ	3954	;# 
   354   000F73                     ADFLTRH         equ	3955	;# 
   355   000F74                     CRCDATA         equ	3956	;# 
   356   000F74                     CRCDATL         equ	3956	;# 
   357   000F75                     CRCDATH         equ	3957	;# 
   358   000F76                     CRCACC          equ	3958	;# 
   359   000F76                     CRCACCL         equ	3958	;# 
   360   000F77                     CRCACCH         equ	3959	;# 
   361   000F78                     CRCSHFT         equ	3960	;# 
   362   000F78                     CRCSHIFTL       equ	3960	;# 
   363   000F79                     CRCSHIFTH       equ	3961	;# 
   364   000F7A                     CRCXOR          equ	3962	;# 
   365   000F7A                     CRCXORL         equ	3962	;# 
   366   000F7B                     CRCXORH         equ	3963	;# 
   367   000F7C                     CRCCON0         equ	3964	;# 
   368   000F7D                     CRCCON1         equ	3965	;# 
   369   000F7E                     NVMADR          equ	3966	;# 
   370   000F7E                     NVMADRL         equ	3966	;# 
   371   000F7F                     NVMADRH         equ	3967	;# 
   372   000F80                     NVMDAT          equ	3968	;# 
   373   000F81                     NVMCON1         equ	3969	;# 
   374   000F82                     NVMCON2         equ	3970	;# 
   375   000F83                     LATA            equ	3971	;# 
   376   000F84                     LATB            equ	3972	;# 
   377   000F85                     LATC            equ	3973	;# 
   378   000F86                     LATD            equ	3974	;# 
   379   000F87                     LATE            equ	3975	;# 
   380   000F88                     TRISA           equ	3976	;# 
   381   000F88                     DDRA            equ	3976	;# 
   382   000F89                     TRISB           equ	3977	;# 
   383   000F89                     DDRB            equ	3977	;# 
   384   000F8A                     TRISC           equ	3978	;# 
   385   000F8A                     DDRC            equ	3978	;# 
   386   000F8B                     TRISD           equ	3979	;# 
   387   000F8B                     DDRD            equ	3979	;# 
   388   000F8C                     TRISE           equ	3980	;# 
   389   000F8C                     DDRE            equ	3980	;# 
   390   000F8D                     PORTA           equ	3981	;# 
   391   000F8E                     PORTB           equ	3982	;# 
   392   000F8F                     PORTC           equ	3983	;# 
   393   000F90                     PORTD           equ	3984	;# 
   394   000F91                     PORTE           equ	3985	;# 
   395   000F92                     SSP1BUF         equ	3986	;# 
   396   000F93                     SSP1ADD         equ	3987	;# 
   397   000F94                     SSP1MSK         equ	3988	;# 
   398   000F95                     SSP1STAT        equ	3989	;# 
   399   000F96                     SSP1CON1        equ	3990	;# 
   400   000F97                     SSP1CON2        equ	3991	;# 
   401   000F98                     SSP1CON3        equ	3992	;# 
   402   000F99                     RC1REG          equ	3993	;# 
   403   000F99                     RCREG           equ	3993	;# 
   404   000F99                     RCREG1          equ	3993	;# 
   405   000F9A                     TX1REG          equ	3994	;# 
   406   000F9A                     TXREG1          equ	3994	;# 
   407   000F9A                     TXREG           equ	3994	;# 
   408   000F9B                     SP1BRG          equ	3995	;# 
   409   000F9B                     SP1BRGL         equ	3995	;# 
   410   000F9B                     SPBRG           equ	3995	;# 
   411   000F9B                     SPBRG1          equ	3995	;# 
   412   000F9B                     SPBRGL          equ	3995	;# 
   413   000F9C                     SP1BRGH         equ	3996	;# 
   414   000F9C                     SPBRGH          equ	3996	;# 
   415   000F9C                     SPBRGH1         equ	3996	;# 
   416   000F9D                     RC1STA          equ	3997	;# 
   417   000F9D                     RCSTA1          equ	3997	;# 
   418   000F9D                     RCSTA           equ	3997	;# 
   419   000F9E                     TX1STA          equ	3998	;# 
   420   000F9E                     TXSTA1          equ	3998	;# 
   421   000F9E                     TXSTA           equ	3998	;# 
   422   000F9F                     BAUD1CON        equ	3999	;# 
   423   000F9F                     BAUDCON1        equ	3999	;# 
   424   000F9F                     BAUDCTL1        equ	3999	;# 
   425   000F9F                     BAUDCON         equ	3999	;# 
   426   000F9F                     BAUDCTL         equ	3999	;# 
   427   000FA0                     PWM4DC          equ	4000	;# 
   428   000FA0                     PWM4DCL         equ	4000	;# 
   429   000FA1                     PWM4DCH         equ	4001	;# 
   430   000FA2                     PWM4CON         equ	4002	;# 
   431   000FA3                     PWM3DC          equ	4003	;# 
   432   000FA3                     PWM3DCL         equ	4003	;# 
   433   000FA4                     PWM3DCH         equ	4004	;# 
   434   000FA5                     PWM3CON         equ	4005	;# 
   435   000FA6                     CCPR2           equ	4006	;# 
   436   000FA6                     CCPR2L          equ	4006	;# 
   437   000FA7                     CCPR2H          equ	4007	;# 
   438   000FA8                     CCP2CON         equ	4008	;# 
   439   000FA9                     CCP2CAP         equ	4009	;# 
   440   000FAA                     CCPR1           equ	4010	;# 
   441   000FAA                     CCPR1L          equ	4010	;# 
   442   000FAB                     CCPR1H          equ	4011	;# 
   443   000FAC                     CCP1CON         equ	4012	;# 
   444   000FAD                     CCP1CAP         equ	4013	;# 
   445   000FAE                     CCPTMRS         equ	4014	;# 
   446   000FAF                     T6TMR           equ	4015	;# 
   447   000FAF                     TMR6            equ	4015	;# 
   448   000FB0                     T6PR            equ	4016	;# 
   449   000FB0                     PR6             equ	4016	;# 
   450   000FB1                     T6CON           equ	4017	;# 
   451   000FB2                     T6HLT           equ	4018	;# 
   452   000FB3                     T6CLKCON        equ	4019	;# 
   453   000FB3                     T6CLK           equ	4019	;# 
   454   000FB4                     T6RST           equ	4020	;# 
   455   000FB5                     T4TMR           equ	4021	;# 
   456   000FB5                     TMR4            equ	4021	;# 
   457   000FB6                     T4PR            equ	4022	;# 
   458   000FB6                     PR4             equ	4022	;# 
   459   000FB7                     T4CON           equ	4023	;# 
   460   000FB8                     T4HLT           equ	4024	;# 
   461   000FB9                     T4CLKCON        equ	4025	;# 
   462   000FB9                     T4CLK           equ	4025	;# 
   463   000FBA                     T4RST           equ	4026	;# 
   464   000FBB                     T2TMR           equ	4027	;# 
   465   000FBB                     TMR2            equ	4027	;# 
   466   000FBC                     T2PR            equ	4028	;# 
   467   000FBC                     PR2             equ	4028	;# 
   468   000FBD                     T2CON           equ	4029	;# 
   469   000FBE                     T2HLT           equ	4030	;# 
   470   000FBF                     T2CLKCON        equ	4031	;# 
   471   000FBF                     T2CLK           equ	4031	;# 
   472   000FC0                     T2RST           equ	4032	;# 
   473   000FC1                     TMR5            equ	4033	;# 
   474   000FC1                     TMR5L           equ	4033	;# 
   475   000FC2                     TMR5H           equ	4034	;# 
   476   000FC3                     T5CON           equ	4035	;# 
   477   000FC4                     T5GCON          equ	4036	;# 
   478   000FC4                     PR5             equ	4036	;# 
   479   000FC5                     T5GATE          equ	4037	;# 
   480   000FC5                     TMR5GATE        equ	4037	;# 
   481   000FC6                     T5CLK           equ	4038	;# 
   482   000FC6                     TMR5CLK         equ	4038	;# 
   483   000FC7                     TMR3            equ	4039	;# 
   484   000FC7                     TMR3L           equ	4039	;# 
   485   000FC8                     TMR3H           equ	4040	;# 
   486   000FC9                     T3CON           equ	4041	;# 
   487   000FCA                     T3GCON          equ	4042	;# 
   488   000FCA                     PR3             equ	4042	;# 
   489   000FCB                     T3GATE          equ	4043	;# 
   490   000FCB                     TMR3GATE        equ	4043	;# 
   491   000FCC                     T3CLK           equ	4044	;# 
   492   000FCC                     TMR3CLK         equ	4044	;# 
   493   000FCD                     TMR1            equ	4045	;# 
   494   000FCD                     TMR1L           equ	4045	;# 
   495   000FCE                     TMR1H           equ	4046	;# 
   496   000FCF                     T1CON           equ	4047	;# 
   497   000FD0                     T1GCON          equ	4048	;# 
   498   000FD0                     PR1             equ	4048	;# 
   499   000FD1                     T1GATE          equ	4049	;# 
   500   000FD1                     TMR1GATE        equ	4049	;# 
   501   000FD2                     T1CLK           equ	4050	;# 
   502   000FD2                     TMR1CLK         equ	4050	;# 
   503   000FD3                     TMR0L           equ	4051	;# 
   504   000FD3                     TMR0            equ	4051	;# 
   505   000FD4                     TMR0H           equ	4052	;# 
   506   000FD4                     PR0             equ	4052	;# 
   507   000FD5                     T0CON0          equ	4053	;# 
   508   000FD6                     T0CON1          equ	4054	;# 
   509   000FD7                     PCON0           equ	4055	;# 
   510   000FD8                     STATUS          equ	4056	;# 
   511   000FD9                     FSR2            equ	4057	;# 
   512   000FD9                     FSR2L           equ	4057	;# 
   513   000FDA                     FSR2H           equ	4058	;# 
   514   000FDB                     PLUSW2          equ	4059	;# 
   515   000FDC                     PREINC2         equ	4060	;# 
   516   000FDD                     POSTDEC2        equ	4061	;# 
   517   000FDE                     POSTINC2        equ	4062	;# 
   518   000FDF                     INDF2           equ	4063	;# 
   519   000FE0                     BSR             equ	4064	;# 
   520   000FE1                     FSR1            equ	4065	;# 
   521   000FE1                     FSR1L           equ	4065	;# 
   522   000FE2                     FSR1H           equ	4066	;# 
   523   000FE3                     PLUSW1          equ	4067	;# 
   524   000FE4                     PREINC1         equ	4068	;# 
   525   000FE5                     POSTDEC1        equ	4069	;# 
   526   000FE6                     POSTINC1        equ	4070	;# 
   527   000FE7                     INDF1           equ	4071	;# 
   528   000FE8                     WREG            equ	4072	;# 
   529   000FE9                     FSR0            equ	4073	;# 
   530   000FE9                     FSR0L           equ	4073	;# 
   531   000FEA                     FSR0H           equ	4074	;# 
   532   000FEB                     PLUSW0          equ	4075	;# 
   533   000FEC                     PREINC0         equ	4076	;# 
   534   000FED                     POSTDEC0        equ	4077	;# 
   535   000FEE                     POSTINC0        equ	4078	;# 
   536   000FEF                     INDF0           equ	4079	;# 
   537   000FF2                     INTCON          equ	4082	;# 
   538   000FF3                     PROD            equ	4083	;# 
   539   000FF3                     PRODL           equ	4083	;# 
   540   000FF4                     PRODH           equ	4084	;# 
   541   000FF5                     TABLAT          equ	4085	;# 
   542   000FF6                     TBLPTR          equ	4086	;# 
   543   000FF6                     TBLPTRL         equ	4086	;# 
   544   000FF7                     TBLPTRH         equ	4087	;# 
   545   000FF8                     TBLPTRU         equ	4088	;# 
   546   000FF9                     PCLAT           equ	4089	;# 
   547   000FF9                     PC              equ	4089	;# 
   548   000FF9                     PCL             equ	4089	;# 
   549   000FFA                     PCLATH          equ	4090	;# 
   550   000FFB                     PCLATU          equ	4091	;# 
   551   000FFC                     STKPTR          equ	4092	;# 
   552   000FFD                     TOS             equ	4093	;# 
   553   000FFD                     TOSL            equ	4093	;# 
   554   000FFE                     TOSH            equ	4094	;# 
   555   000FFF                     TOSU            equ	4095	;# 
   556                           
   557                           	psect	idataCOMRAM
   558   00127A                     __pidataCOMRAM:
   559                           	callstack 0
   560                           
   561                           ;initializer for getKey@F10302
   562   00127A  31                 	db	49
   563   00127B  34                 	db	52
   564   00127C  37                 	db	55
   565   00127D  2A                 	db	42
   566   00127E  32                 	db	50
   567   00127F  35                 	db	53
   568   001280  38                 	db	56
   569   001281  30                 	db	48
   570   001282  33                 	db	51
   571   001283  36                 	db	54
   572   001284  39                 	db	57
   573   001285  23                 	db	35
   574   001286  41                 	db	65
   575   001287  42                 	db	66
   576   001288  43                 	db	67
   577   001289  44                 	db	68
   578   000F26                     _ANSELD         set	3878
   579   000F21                     _ANSELC         set	3873
   580   000F19                     _ANSELB         set	3865
   581   000F11                     _ANSELA         set	3857
   582   000F85                     _LATC           set	3973
   583   000F8B                     _TRISD          set	3979
   584   000F8A                     _TRISC          set	3978
   585   000F89                     _TRISB          set	3977
   586   000F88                     _TRISA          set	3976
   587   000F86                     _LATD           set	3974
   588   000F83                     _LATA           set	3971
   589   000F8E                     _PORTB          set	3982
   590   000F84                     _LATB           set	3972
   591                           
   592                           ; #config settings
   593                           
   594                           	psect	cinit
   595   001248                     __pcinit:
   596                           	callstack 0
   597   001248                     start_initialization:
   598                           	callstack 0
   599   001248                     __initialization:
   600                           	callstack 0
   601                           
   602                           ; Initialize objects allocated to COMRAM (16 bytes)
   603                           ; load TBLPTR registers with __pidataCOMRAM
   604   001248  0E7A               	movlw	low __pidataCOMRAM
   605   00124A  6EF6               	movwf	tblptrl,c
   606   00124C  0E12               	movlw	high __pidataCOMRAM
   607   00124E  6EF7               	movwf	tblptrh,c
   608   001250  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   609   001252  6EF8               	movwf	tblptru,c
   610   001254  EE00  F043         	lfsr	0,__pdataCOMRAM
   611   001258  EE10 F010          	lfsr	1,16
   612   00125C                     copy_data0:
   613   00125C  0009               	tblrd		*+
   614   00125E  CFF5 FFEE          	movff	tablat,postinc0
   615   001262  50E5               	movf	postdec1,w,c
   616   001264  50E1               	movf	fsr1l,w,c
   617   001266  E1FA               	bnz	copy_data0
   618                           
   619                           ; Clear objects allocated to COMRAM (18 bytes)
   620   001268  EE00  F031         	lfsr	0,__pbssCOMRAM
   621   00126C  0E12               	movlw	18
   622   00126E                     clear_0:
   623   00126E  6AEE               	clrf	postinc0,c
   624   001270  06E8               	decf	wreg,f,c
   625   001272  E1FD               	bnz	clear_0
   626   001274                     end_of_initialization:
   627                           	callstack 0
   628   001274                     __end_of__initialization:
   629                           	callstack 0
   630   001274  0100               	movlb	0
   631   001276  EFC3  F008         	goto	_main	;jump to C main() function
   632                           
   633                           	psect	bssCOMRAM
   634   000031                     __pbssCOMRAM:
   635                           	callstack 0
   636   000031                     	ds	8
   637   000039                     	ds	8
   638   000041                     _i:
   639                           	callstack 0
   640   000041                     	ds	2
   641                           
   642                           	psect	dataCOMRAM
   643   000043                     __pdataCOMRAM:
   644                           	callstack 0
   645   000043                     getKey@F10302:
   646                           	callstack 0
   647   000043                     	ds	16
   648                           
   649                           	psect	cstackCOMRAM
   650   000001                     __pcstackCOMRAM:
   651                           	callstack 0
   652   000001                     showTime@time:
   653                           	callstack 0
   654   000001                     ??_getKey:
   655                           
   656                           ; 1 bytes @ 0x0
   657   000001                     	ds	1
   658   000002                     ??_showTime:
   659                           
   660                           ; 1 bytes @ 0x1
   661   000002                     	ds	1
   662   000003                     getKey@keys:
   663                           	callstack 0
   664                           
   665                           ; 16 bytes @ 0x2
   666   000003                     	ds	1
   667   000004                     showTime@num:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x3
   671   000004                     	ds	2
   672   000006                     showTime@j:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x5
   676   000006                     	ds	13
   677   000013                     getKey@col:
   678                           	callstack 0
   679                           
   680                           ; 2 bytes @ 0x12
   681   000013                     	ds	2
   682   000015                     getKey@key:
   683                           	callstack 0
   684                           
   685                           ; 1 bytes @ 0x14
   686   000015                     	ds	1
   687   000016                     getKey@pressed:
   688                           	callstack 0
   689                           
   690                           ; 1 bytes @ 0x15
   691   000016                     	ds	1
   692   000017                     getKey@row:
   693                           	callstack 0
   694                           
   695                           ; 2 bytes @ 0x16
   696   000017                     	ds	2
   697   000019                     getKey@idx:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x18
   701   000019                     	ds	2
   702   00001B                     ??_main:
   703                           
   704                           ; 1 bytes @ 0x1A
   705   00001B                     	ds	2
   706   00001D                     main@old_nums:
   707                           	callstack 0
   708                           
   709                           ; 8 bytes @ 0x1C
   710   00001D                     	ds	8
   711   000025                     main@nums:
   712                           	callstack 0
   713                           
   714                           ; 8 bytes @ 0x24
   715   000025                     	ds	8
   716   00002D                     main@i:
   717                           	callstack 0
   718                           
   719                           ; 2 bytes @ 0x2C
   720   00002D                     	ds	2
   721   00002F                     main@last_key:
   722                           	callstack 0
   723                           
   724                           ; 1 bytes @ 0x2E
   725   00002F                     	ds	1
   726   000030                     main@key:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x2F
   730   000030                     	ds	1
   731                           
   732 ;;
   733 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   734 ;;
   735 ;; *************** function _main *****************
   736 ;; Defined at:
   737 ;;		line 131 in file "main.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  nums            8   36[COMRAM] short [4]
   742 ;;  old_nums        8   28[COMRAM] short [4]
   743 ;;  i               2   44[COMRAM] short 
   744 ;;  time            2    0        short 
   745 ;;  key             1   47[COMRAM] unsigned char 
   746 ;;  last_key        1   46[COMRAM] unsigned char 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   757 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   758 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   759 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   760 ;;Total ram usage:       22 bytes
   761 ;; Hardware stack levels required when called: 1
   762 ;; This function calls:
   763 ;;		_getKey
   764 ;;		_showTime
   765 ;; This function is called by:
   766 ;;		Startup code after reset
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text0
   771   001186                     __ptext0:
   772                           	callstack 0
   773   001186                     _main:
   774                           	callstack 30
   775   001186                     
   776                           ;main.c: 133:     short i = 0;
   777   001186  6A2E               	clrf	(main@i+1)^0,c
   778   001188  0E00               	movlw	0
   779   00118A  6E2D               	movwf	main@i^0,c
   780                           
   781                           ;main.c: 135:     char key = 'q';
   782   00118C  0E71               	movlw	113
   783   00118E  6E30               	movwf	main@key^0,c
   784                           
   785                           ;main.c: 136:     char last_key = 'q';
   786   001190  0E71               	movlw	113
   787   001192  6E2F               	movwf	main@last_key^0,c
   788   001194                     
   789                           ;main.c: 137:     short nums[] = {0,0,0,0};
   790   001194  EE20  F025         	lfsr	2,main@nums
   791   001198  0E07               	movlw	7
   792   00119A                     u211:
   793   00119A  6ADE               	clrf	postinc2,c
   794   00119C  06E8               	decf	wreg,f,c
   795   00119E  E2FD               	bc	u211
   796   0011A0                     
   797                           ;main.c: 138:     short old_nums[] = {0,0,0,0};
   798   0011A0  EE20  F01D         	lfsr	2,main@old_nums
   799   0011A4  0E07               	movlw	7
   800   0011A6                     u221:
   801   0011A6  6ADE               	clrf	postinc2,c
   802   0011A8  06E8               	decf	wreg,f,c
   803   0011AA  E2FD               	bc	u221
   804   0011AC                     
   805                           ;main.c: 139:     ANSELA = 0;
   806   0011AC  010F               	movlb	15	; () banked
   807   0011AE  6B11               	clrf	17,b	;volatile
   808   0011B0                     
   809                           ; BSR set to: 15
   810                           ;main.c: 140:     ANSELB = 0;
   811   0011B0  6B19               	clrf	25,b	;volatile
   812   0011B2                     
   813                           ; BSR set to: 15
   814                           ;main.c: 141:     ANSELC = 0;
   815   0011B2  6B21               	clrf	33,b	;volatile
   816   0011B4                     
   817                           ; BSR set to: 15
   818                           ;main.c: 142:     ANSELD = 0;
   819   0011B4  6B26               	clrf	38,b	;volatile
   820   0011B6                     
   821                           ; BSR set to: 15
   822                           ;main.c: 143:     TRISA = 0b00000000;
   823   0011B6  6A88               	clrf	136,c	;volatile
   824                           
   825                           ;main.c: 144:     TRISB = 0b11110000;
   826   0011B8  0EF0               	movlw	240
   827   0011BA  6E89               	movwf	137,c	;volatile
   828   0011BC                     
   829                           ; BSR set to: 15
   830                           ;main.c: 145:     TRISC = 0;
   831   0011BC  6A8A               	clrf	138,c	;volatile
   832   0011BE                     
   833                           ; BSR set to: 15
   834                           ;main.c: 146:     TRISD = 0;
   835   0011BE  6A8B               	clrf	139,c	;volatile
   836   0011C0                     
   837                           ; BSR set to: 15
   838                           ;main.c: 147:     LATA = 0xFF;
   839   0011C0  6883               	setf	131,c	;volatile
   840                           
   841                           ;main.c: 148:     LATB = 0x0F;
   842   0011C2  0E0F               	movlw	15
   843   0011C4  6E84               	movwf	132,c	;volatile
   844                           
   845                           ;main.c: 149:     LATC = 0b10000001;
   846   0011C6  0E81               	movlw	129
   847   0011C8  6E85               	movwf	133,c	;volatile
   848   0011CA                     
   849                           ; BSR set to: 15
   850                           ;main.c: 150:     LATD = 0;
   851   0011CA  6A86               	clrf	134,c	;volatile
   852   0011CC                     l1070:
   853                           
   854                           ;main.c: 153:     {;main.c: 155:         key = getKey();
   855   0011CC  EC24  F008         	call	_getKey	;wreg free
   856   0011D0  6E30               	movwf	main@key^0,c
   857   0011D2                     
   858                           ;main.c: 156:         if(key >= '0' && key <= '9' && last_key != key){
   859   0011D2  0E2F               	movlw	47
   860   0011D4  6430               	cpfsgt	main@key^0,c
   861   0011D6  EFEF  F008         	goto	u231
   862   0011DA  EFF1  F008         	goto	u230
   863   0011DE                     u231:
   864   0011DE  EF15  F009         	goto	l1082
   865   0011E2                     u230:
   866   0011E2  0E3A               	movlw	58
   867   0011E4  6030               	cpfslt	main@key^0,c
   868   0011E6  EFF7  F008         	goto	u241
   869   0011EA  EFF9  F008         	goto	u240
   870   0011EE                     u241:
   871   0011EE  EF15  F009         	goto	l1082
   872   0011F2                     u240:
   873   0011F2  5030               	movf	main@key^0,w,c
   874   0011F4  182F               	xorwf	main@last_key^0,w,c
   875   0011F6  B4D8               	btfsc	status,2,c
   876   0011F8  EF00  F009         	goto	u251
   877   0011FC  EF02  F009         	goto	u250
   878   001200                     u251:
   879   001200  EF15  F009         	goto	l1082
   880   001204                     u250:
   881   001204                     
   882                           ;main.c: 157:             nums[i%4] = key -'0';
   883   001204  0ED0               	movlw	208
   884   001206  2430               	addwf	main@key^0,w,c
   885   001208  6E1B               	movwf	??_main^0,c
   886   00120A  6A1C               	clrf	(??_main+1)^0,c
   887   00120C  0EFF               	movlw	255
   888   00120E  221C               	addwfc	(??_main+1)^0,f,c
   889   001210  502D               	movf	main@i^0,w,c
   890   001212  0B03               	andlw	3
   891   001214  0D02               	mullw	2
   892   001216  50F3               	movf	243,w,c
   893   001218  0F25               	addlw	low main@nums
   894   00121A  6ED9               	movwf	fsr2l,c
   895   00121C  6ADA               	clrf	fsr2h,c
   896   00121E  C01B  FFDE         	movff	??_main,postinc2
   897   001222  C01C  FFDD         	movff	??_main+1,postdec2
   898   001226                     
   899                           ;main.c: 158:             i++;
   900   001226  4A2D               	infsnz	main@i^0,f,c
   901   001228  2A2E               	incf	(main@i+1)^0,f,c
   902   00122A                     l1082:
   903                           
   904                           ;main.c: 160:         showTime(nums);
   905   00122A  0E25               	movlw	low main@nums
   906   00122C  6E01               	movwf	showTime@time^0,c
   907   00122E  EC81  F007         	call	_showTime	;wreg free
   908   001232                     
   909                           ;main.c: 161:         _delay((unsigned long)((1)*(8000000/4000.0)));
   910   001232  0E03               	movlw	3
   911   001234  6E1B               	movwf	??_main^0,c
   912   001236  0E98               	movlw	152
   913   001238                     u267:
   914   001238  2EE8               	decfsz	wreg,f,c
   915   00123A  D7FE               	bra	u267
   916   00123C  2E1B               	decfsz	??_main^0,f,c
   917   00123E  D7FC               	bra	u267
   918   001240  EFE6  F008         	goto	l1070
   919   001244  EFFE  F0FF         	goto	start
   920   001248                     __end_of_main:
   921                           	callstack 0
   922                           
   923 ;; *************** function _showTime *****************
   924 ;; Defined at:
   925 ;;		line 87 in file "main.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  time            1    0[COMRAM] PTR short 
   928 ;;		 -> main@nums(8), 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  j               2    5[COMRAM] int 
   931 ;;  num             2    3[COMRAM] int 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   941 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   942 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   943 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   944 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   945 ;;Total ram usage:        7 bytes
   946 ;; Hardware stack levels used: 1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_main
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text1
   955   000F02                     __ptext1:
   956                           	callstack 0
   957   000F02                     _showTime:
   958                           	callstack 30
   959   000F02                     
   960                           ;main.c: 89:     for(int j = 0; j<4; j++){
   961   000F02  6A07               	clrf	(showTime@j+1)^0,c
   962   000F04  0E00               	movlw	0
   963   000F06  6E06               	movwf	showTime@j^0,c
   964   000F08  BE07               	btfsc	(showTime@j+1)^0,7,c
   965   000F0A  EF90  F007         	goto	u181
   966   000F0E  5007               	movf	(showTime@j+1)^0,w,c
   967   000F10  E109               	bnz	u180
   968   000F12  0E04               	movlw	4
   969   000F14  5C06               	subwf	showTime@j^0,w,c
   970   000F16  A0D8               	btfss	status,0,c
   971   000F18  EF90  F007         	goto	u181
   972   000F1C  EF92  F007         	goto	u180
   973   000F20                     u181:
   974   000F20  EF94  F007         	goto	l1010
   975   000F24                     u180:
   976   000F24  EF23  F008         	goto	l61
   977   000F28                     l1010:
   978                           
   979                           ;main.c: 90:         num = time[j];
   980   000F28  5006               	movf	showTime@j^0,w,c
   981   000F2A  0D02               	mullw	2
   982   000F2C  5001               	movf	showTime@time^0,w,c
   983   000F2E  24F3               	addwf	243,w,c
   984   000F30  6ED9               	movwf	fsr2l,c
   985   000F32  6ADA               	clrf	fsr2h,c
   986   000F34  CFDE F004          	movff	postinc2,showTime@num
   987   000F38  CFDD F005          	movff	postdec2,showTime@num+1
   988   000F3C                     
   989                           ;main.c: 91:         LATA = 1<<j;
   990   000F3C  C006  F002         	movff	showTime@j,??_showTime
   991   000F40  0E01               	movlw	1
   992   000F42  6E03               	movwf	(??_showTime+1)^0,c
   993   000F44  2A02               	incf	??_showTime^0,f,c
   994   000F46  EFA7  F007         	goto	u194
   995   000F4A                     u195:
   996   000F4A  90D8               	bcf	status,0,c
   997   000F4C  3603               	rlcf	(??_showTime+1)^0,f,c
   998   000F4E                     u194:
   999   000F4E  2E02               	decfsz	??_showTime^0,f,c
  1000   000F50  EFA5  F007         	goto	u195
  1001   000F54  5003               	movf	(??_showTime+1)^0,w,c
  1002   000F56  6E83               	movwf	131,c	;volatile
  1003                           
  1004                           ;main.c: 92:         switch(num){
  1005   000F58  EFD6  F007         	goto	l1036
  1006   000F5C                     l1014:
  1007                           
  1008                           ;main.c: 94:             LATD = 0b00111111;
  1009   000F5C  0E3F               	movlw	63
  1010   000F5E  6E86               	movwf	134,c	;volatile
  1011                           
  1012                           ;main.c: 95:             break;
  1013   000F60  EF0C  F008         	goto	l1038
  1014   000F64                     l1016:
  1015                           
  1016                           ;main.c: 98:             LATD = 0b00000110;
  1017   000F64  0E06               	movlw	6
  1018   000F66  6E86               	movwf	134,c	;volatile
  1019                           
  1020                           ;main.c: 99:             break;
  1021   000F68  EF0C  F008         	goto	l1038
  1022   000F6C                     l1018:
  1023                           
  1024                           ;main.c: 101:             LATD = 0b01011011;
  1025   000F6C  0E5B               	movlw	91
  1026   000F6E  6E86               	movwf	134,c	;volatile
  1027                           
  1028                           ;main.c: 102:             break;
  1029   000F70  EF0C  F008         	goto	l1038
  1030   000F74                     l1020:
  1031                           
  1032                           ;main.c: 104:             LATD = 0b01001111;
  1033   000F74  0E4F               	movlw	79
  1034   000F76  6E86               	movwf	134,c	;volatile
  1035                           
  1036                           ;main.c: 105:             break;
  1037   000F78  EF0C  F008         	goto	l1038
  1038   000F7C                     l1022:
  1039                           
  1040                           ;main.c: 107:             LATD = 0b01100110;
  1041   000F7C  0E66               	movlw	102
  1042   000F7E  6E86               	movwf	134,c	;volatile
  1043                           
  1044                           ;main.c: 108:             break;
  1045   000F80  EF0C  F008         	goto	l1038
  1046   000F84                     l1024:
  1047                           
  1048                           ;main.c: 110:             LATD = 0b01101101;
  1049   000F84  0E6D               	movlw	109
  1050   000F86  6E86               	movwf	134,c	;volatile
  1051                           
  1052                           ;main.c: 111:             break;
  1053   000F88  EF0C  F008         	goto	l1038
  1054   000F8C                     l1026:
  1055                           
  1056                           ;main.c: 113:             LATD = 0b01111101;
  1057   000F8C  0E7D               	movlw	125
  1058   000F8E  6E86               	movwf	134,c	;volatile
  1059                           
  1060                           ;main.c: 114:             break;
  1061   000F90  EF0C  F008         	goto	l1038
  1062   000F94                     l1028:
  1063                           
  1064                           ;main.c: 116:             LATD = 0b00000111;
  1065   000F94  0E07               	movlw	7
  1066   000F96  6E86               	movwf	134,c	;volatile
  1067                           
  1068                           ;main.c: 117:             break;
  1069   000F98  EF0C  F008         	goto	l1038
  1070   000F9C                     l1030:
  1071                           
  1072                           ;main.c: 119:             LATD = 0b01111111;
  1073   000F9C  0E7F               	movlw	127
  1074   000F9E  6E86               	movwf	134,c	;volatile
  1075                           
  1076                           ;main.c: 120:             break;
  1077   000FA0  EF0C  F008         	goto	l1038
  1078   000FA4                     l1032:
  1079                           
  1080                           ;main.c: 122:             LATD = 0b01101111;
  1081   000FA4  0E6F               	movlw	111
  1082   000FA6  6E86               	movwf	134,c	;volatile
  1083                           
  1084                           ;main.c: 123:             break;
  1085   000FA8  EF0C  F008         	goto	l1038
  1086   000FAC                     l1036:
  1087   000FAC  C004  F002         	movff	showTime@num,??_showTime
  1088   000FB0  C005  F003         	movff	showTime@num+1,??_showTime+1
  1089                           
  1090                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1091                           ; Switch size 1, requested type "simple"
  1092                           ; Number of cases is 1, Range of values is 0 to 0
  1093                           ; switch strategies available:
  1094                           ; Name         Instructions Cycles
  1095                           ; simple_byte            4     3 (average)
  1096                           ;	Chosen strategy is simple_byte
  1097   000FB4  5003               	movf	(??_showTime+1)^0,w,c
  1098   000FB6  0A00               	xorlw	0	; case 0
  1099   000FB8  B4D8               	btfsc	status,2,c
  1100   000FBA  EFE1  F007         	goto	l1106
  1101   000FBE  EF0C  F008         	goto	l1038
  1102   000FC2                     l1106:
  1103                           
  1104                           ; Switch size 1, requested type "simple"
  1105                           ; Number of cases is 10, Range of values is 0 to 9
  1106                           ; switch strategies available:
  1107                           ; Name         Instructions Cycles
  1108                           ; simple_byte           31    16 (average)
  1109                           ;	Chosen strategy is simple_byte
  1110   000FC2  5002               	movf	??_showTime^0,w,c
  1111   000FC4  0A00               	xorlw	0	; case 0
  1112   000FC6  B4D8               	btfsc	status,2,c
  1113   000FC8  EFAE  F007         	goto	l1014
  1114   000FCC  0A01               	xorlw	1	; case 1
  1115   000FCE  B4D8               	btfsc	status,2,c
  1116   000FD0  EFB2  F007         	goto	l1016
  1117   000FD4  0A03               	xorlw	3	; case 2
  1118   000FD6  B4D8               	btfsc	status,2,c
  1119   000FD8  EFB6  F007         	goto	l1018
  1120   000FDC  0A01               	xorlw	1	; case 3
  1121   000FDE  B4D8               	btfsc	status,2,c
  1122   000FE0  EFBA  F007         	goto	l1020
  1123   000FE4  0A07               	xorlw	7	; case 4
  1124   000FE6  B4D8               	btfsc	status,2,c
  1125   000FE8  EFBE  F007         	goto	l1022
  1126   000FEC  0A01               	xorlw	1	; case 5
  1127   000FEE  B4D8               	btfsc	status,2,c
  1128   000FF0  EFC2  F007         	goto	l1024
  1129   000FF4  0A03               	xorlw	3	; case 6
  1130   000FF6  B4D8               	btfsc	status,2,c
  1131   000FF8  EFC6  F007         	goto	l1026
  1132   000FFC  0A01               	xorlw	1	; case 7
  1133   000FFE  B4D8               	btfsc	status,2,c
  1134   001000  EFCA  F007         	goto	l1028
  1135   001004  0A0F               	xorlw	15	; case 8
  1136   001006  B4D8               	btfsc	status,2,c
  1137   001008  EFCE  F007         	goto	l1030
  1138   00100C  0A01               	xorlw	1	; case 9
  1139   00100E  B4D8               	btfsc	status,2,c
  1140   001010  EFD2  F007         	goto	l1032
  1141   001014  EF0C  F008         	goto	l1038
  1142   001018                     l1038:
  1143   001018  0E03               	movlw	3
  1144   00101A  6E02               	movwf	??_showTime^0,c
  1145   00101C  0E98               	movlw	152
  1146   00101E                     u277:
  1147   00101E  2EE8               	decfsz	wreg,f,c
  1148   001020  D7FE               	bra	u277
  1149   001022  2E02               	decfsz	??_showTime^0,f,c
  1150   001024  D7FC               	bra	u277
  1151   001026                     
  1152                           ;main.c: 127:     }
  1153   001026  4A06               	infsnz	showTime@j^0,f,c
  1154   001028  2A07               	incf	(showTime@j+1)^0,f,c
  1155   00102A  BE07               	btfsc	(showTime@j+1)^0,7,c
  1156   00102C  EF21  F008         	goto	u201
  1157   001030  5007               	movf	(showTime@j+1)^0,w,c
  1158   001032  E109               	bnz	u200
  1159   001034  0E04               	movlw	4
  1160   001036  5C06               	subwf	showTime@j^0,w,c
  1161   001038  A0D8               	btfss	status,0,c
  1162   00103A  EF21  F008         	goto	u201
  1163   00103E  EF23  F008         	goto	u200
  1164   001042                     u201:
  1165   001042  EF94  F007         	goto	l1010
  1166   001046                     u200:
  1167   001046                     l61:
  1168   001046  0012               	return		;funcret
  1169   001048                     __end_of_showTime:
  1170                           	callstack 0
  1171                           
  1172 ;; *************** function _getKey *****************
  1173 ;; Defined at:
  1174 ;;		line 47 in file "main.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;		None
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  keys           16    2[COMRAM] unsigned char [4][4]
  1179 ;;  idx             2   24[COMRAM] short 
  1180 ;;  row             2   22[COMRAM] short 
  1181 ;;  col             2   18[COMRAM] short 
  1182 ;;  pressed         1   21[COMRAM] _Bool 
  1183 ;;  key             1   20[COMRAM] unsigned char 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      unsigned char 
  1186 ;; Registers used:
  1187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1194 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1195 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1196 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1197 ;;Total ram usage:       26 bytes
  1198 ;; Hardware stack levels used: 1
  1199 ;; This function calls:
  1200 ;;		Nothing
  1201 ;; This function is called by:
  1202 ;;		_main
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text2
  1207   001048                     __ptext2:
  1208                           	callstack 0
  1209   001048                     _getKey:
  1210                           	callstack 30
  1211   001048                     
  1212                           ;main.c: 48:     LATB = 0xFF;
  1213   001048  6884               	setf	132,c	;volatile
  1214   00104A                     
  1215                           ;main.c: 49:     char key = 'q';
  1216   00104A  0E71               	movlw	113
  1217   00104C  6E15               	movwf	getKey@key^0,c
  1218                           
  1219                           ;main.c: 50:     short idx = 0;
  1220   00104E  6A1A               	clrf	(getKey@idx+1)^0,c
  1221   001050  0E00               	movlw	0
  1222   001052  6E19               	movwf	getKey@idx^0,c
  1223   001054                     
  1224                           ;main.c: 51:     _Bool pressed = 0;
  1225   001054  6A16               	clrf	getKey@pressed^0,c
  1226   001056                     
  1227                           ;main.c: 52:     char keys[4][4] = {
  1228   001056  EE20  F043         	lfsr	2,getKey@F10302
  1229   00105A  EE10  F003         	lfsr	1,getKey@keys
  1230   00105E  0E0F               	movlw	15
  1231   001060                     u11:
  1232   001060  CFDB FFE3          	movff	plusw2,plusw1
  1233   001064  06E8               	decf	wreg,f,c
  1234   001066  E2FC               	bc	u11
  1235   001068                     
  1236                           ;main.c: 58:     short row = -1;
  1237   001068  6817               	setf	getKey@row^0,c
  1238   00106A  6818               	setf	(getKey@row+1)^0,c
  1239   00106C                     
  1240                           ;main.c: 59:     short col = -1;
  1241   00106C  6813               	setf	getKey@col^0,c
  1242   00106E  6814               	setf	(getKey@col+1)^0,c
  1243                           
  1244                           ;main.c: 60:     while(idx<4){
  1245   001070  EF5C  F008         	goto	l880
  1246   001074                     l872:
  1247                           
  1248                           ;main.c: 61:         if(PORTB & 1<<(idx+4)){
  1249   001074  C019  F001         	movff	getKey@idx,??_getKey
  1250   001078  0E04               	movlw	4
  1251   00107A  2601               	addwf	??_getKey^0,f,c
  1252   00107C  0E01               	movlw	1
  1253   00107E  6E02               	movwf	(??_getKey+1)^0,c
  1254   001080  2A01               	incf	??_getKey^0,f,c
  1255   001082  EF45  F008         	goto	u24
  1256   001086                     u25:
  1257   001086  90D8               	bcf	status,0,c
  1258   001088  3602               	rlcf	(??_getKey+1)^0,f,c
  1259   00108A                     u24:
  1260   00108A  2E01               	decfsz	??_getKey^0,f,c
  1261   00108C  EF43  F008         	goto	u25
  1262   001090  5002               	movf	(??_getKey+1)^0,w,c
  1263   001092  148E               	andwf	142,w,c	;volatile
  1264   001094  0900               	iorlw	0
  1265   001096  B4D8               	btfsc	status,2,c
  1266   001098  EF50  F008         	goto	u31
  1267   00109C  EF52  F008         	goto	u30
  1268   0010A0                     u31:
  1269   0010A0  EF5A  F008         	goto	l878
  1270   0010A4                     u30:
  1271   0010A4                     
  1272                           ;main.c: 62:             row = idx;
  1273   0010A4  C019  F017         	movff	getKey@idx,getKey@row
  1274   0010A8  C01A  F018         	movff	getKey@idx+1,getKey@row+1
  1275   0010AC                     
  1276                           ;main.c: 63:             pressed = 1;
  1277   0010AC  0E01               	movlw	1
  1278   0010AE  6E16               	movwf	getKey@pressed^0,c
  1279                           
  1280                           ;main.c: 64:             break;
  1281   0010B0  EF6A  F008         	goto	l882
  1282   0010B4                     l878:
  1283                           
  1284                           ;main.c: 66:         idx++;
  1285   0010B4  4A19               	infsnz	getKey@idx^0,f,c
  1286   0010B6  2A1A               	incf	(getKey@idx+1)^0,f,c
  1287   0010B8                     l880:
  1288                           
  1289                           ;main.c: 60:     while(idx<4){
  1290   0010B8  BE1A               	btfsc	(getKey@idx+1)^0,7,c
  1291   0010BA  EF68  F008         	goto	u41
  1292   0010BE  501A               	movf	(getKey@idx+1)^0,w,c
  1293   0010C0  E109               	bnz	u40
  1294   0010C2  0E04               	movlw	4
  1295   0010C4  5C19               	subwf	getKey@idx^0,w,c
  1296   0010C6  A0D8               	btfss	status,0,c
  1297   0010C8  EF68  F008         	goto	u41
  1298   0010CC  EF6A  F008         	goto	u40
  1299   0010D0                     u41:
  1300   0010D0  EF3A  F008         	goto	l872
  1301   0010D4                     u40:
  1302   0010D4                     l882:
  1303                           
  1304                           ;main.c: 69:     if(pressed){
  1305   0010D4  5016               	movf	getKey@pressed^0,w,c
  1306   0010D6  B4D8               	btfsc	status,2,c
  1307   0010D8  EF70  F008         	goto	u51
  1308   0010DC  EF72  F008         	goto	u50
  1309   0010E0                     u51:
  1310   0010E0  EFC1  F008         	goto	l898
  1311   0010E4                     u50:
  1312   0010E4                     
  1313                           ;main.c: 70:         idx = 0;
  1314   0010E4  6A1A               	clrf	(getKey@idx+1)^0,c
  1315   0010E6  0E00               	movlw	0
  1316   0010E8  6E19               	movwf	getKey@idx^0,c
  1317                           
  1318                           ;main.c: 71:         while(idx<4){
  1319   0010EA  EFA9  F008         	goto	l892
  1320   0010EE                     l886:
  1321                           
  1322                           ;main.c: 72:             LATB |= 0x0F;
  1323   0010EE  0E0F               	movlw	15
  1324   0010F0  1284               	iorwf	132,f,c	;volatile
  1325                           
  1326                           ;main.c: 73:             LATB = LATB & ~(1<<idx);
  1327   0010F2  C019  F001         	movff	getKey@idx,??_getKey
  1328   0010F6  0E01               	movlw	1
  1329   0010F8  6E02               	movwf	(??_getKey+1)^0,c
  1330   0010FA  2A01               	incf	??_getKey^0,f,c
  1331   0010FC  EF82  F008         	goto	u64
  1332   001100                     u65:
  1333   001100  90D8               	bcf	status,0,c
  1334   001102  3602               	rlcf	(??_getKey+1)^0,f,c
  1335   001104                     u64:
  1336   001104  2E01               	decfsz	??_getKey^0,f,c
  1337   001106  EF80  F008         	goto	u65
  1338   00110A  5002               	movf	(??_getKey+1)^0,w,c
  1339   00110C  0AFF               	xorlw	255
  1340   00110E  1484               	andwf	132,w,c	;volatile
  1341   001110  6E84               	movwf	132,c	;volatile
  1342                           
  1343                           ;main.c: 74:             if(!(PORTB & (1<<row+4))){
  1344   001112  C017  F001         	movff	getKey@row,??_getKey
  1345   001116  0E04               	movlw	4
  1346   001118  2601               	addwf	??_getKey^0,f,c
  1347   00111A  0E01               	movlw	1
  1348   00111C  6E02               	movwf	(??_getKey+1)^0,c
  1349   00111E  2A01               	incf	??_getKey^0,f,c
  1350   001120  EF94  F008         	goto	u74
  1351   001124                     u75:
  1352   001124  90D8               	bcf	status,0,c
  1353   001126  3602               	rlcf	(??_getKey+1)^0,f,c
  1354   001128                     u74:
  1355   001128  2E01               	decfsz	??_getKey^0,f,c
  1356   00112A  EF92  F008         	goto	u75
  1357   00112E  5002               	movf	(??_getKey+1)^0,w,c
  1358   001130  148E               	andwf	142,w,c	;volatile
  1359   001132  0900               	iorlw	0
  1360   001134  A4D8               	btfss	status,2,c
  1361   001136  EF9F  F008         	goto	u81
  1362   00113A  EFA1  F008         	goto	u80
  1363   00113E                     u81:
  1364   00113E  EFA7  F008         	goto	l890
  1365   001142                     u80:
  1366   001142                     
  1367                           ;main.c: 75:                 col = idx;
  1368   001142  C019  F013         	movff	getKey@idx,getKey@col
  1369   001146  C01A  F014         	movff	getKey@idx+1,getKey@col+1
  1370                           
  1371                           ;main.c: 76:                 break;
  1372   00114A  EFB7  F008         	goto	l894
  1373   00114E                     l890:
  1374                           
  1375                           ;main.c: 78:             idx++;
  1376   00114E  4A19               	infsnz	getKey@idx^0,f,c
  1377   001150  2A1A               	incf	(getKey@idx+1)^0,f,c
  1378   001152                     l892:
  1379                           
  1380                           ;main.c: 71:         while(idx<4){
  1381   001152  BE1A               	btfsc	(getKey@idx+1)^0,7,c
  1382   001154  EFB5  F008         	goto	u91
  1383   001158  501A               	movf	(getKey@idx+1)^0,w,c
  1384   00115A  E109               	bnz	u90
  1385   00115C  0E04               	movlw	4
  1386   00115E  5C19               	subwf	getKey@idx^0,w,c
  1387   001160  A0D8               	btfss	status,0,c
  1388   001162  EFB5  F008         	goto	u91
  1389   001166  EFB7  F008         	goto	u90
  1390   00116A                     u91:
  1391   00116A  EF77  F008         	goto	l886
  1392   00116E                     u90:
  1393   00116E                     l894:
  1394                           
  1395                           ;main.c: 83:         return keys[col][row];
  1396   00116E  5013               	movf	getKey@col^0,w,c
  1397   001170  0D04               	mullw	4
  1398   001172  50F3               	movf	243,w,c
  1399   001174  0F03               	addlw	low getKey@keys
  1400   001176  2417               	addwf	getKey@row^0,w,c
  1401   001178  6ED9               	movwf	fsr2l,c
  1402   00117A  6ADA               	clrf	fsr2h,c
  1403   00117C  50DF               	movf	indf2,w,c
  1404   00117E  EFC2  F008         	goto	l44
  1405   001182                     l898:
  1406                           
  1407                           ;main.c: 85:     return key;
  1408   001182  5015               	movf	getKey@key^0,w,c
  1409   001184                     l44:
  1410   001184  0012               	return		;funcret
  1411   001186                     __end_of_getKey:
  1412                           	callstack 0
  1413                           
  1414                           	psect	smallconst
  1415   000F00                     __psmallconst:
  1416                           	callstack 0
  1417   000F00  00                 	db	0
  1418   000F01  00                 	db	0	; dummy byte at the end
  1419   000F00                     __smallconst    set	__psmallconst
  1420   000F00                     __mediumconst   set	__psmallconst
  1421   000003                     __activetblptr  equ	3
  1422                           
  1423                           	psect	rparam
  1424   000001                     ___rparam_used  equ	1
  1425   000000                     ___param_bank   equ	0
  1426   000000                     __Lparam        equ	__Lrparam
  1427   000000                     __Hparam        equ	__Hrparam
  1428                           
  1429                           	psect	idloc
  1430                           
  1431                           ;Config register IDLOC0 @ 0x200000
  1432                           ;	unspecified, using default values
  1433   200000                     	org	2097152
  1434   200000  FFFF               	dw	65535
  1435                           
  1436                           ;Config register IDLOC1 @ 0x200002
  1437                           ;	unspecified, using default values
  1438   200002                     	org	2097154
  1439   200002  FFFF               	dw	65535
  1440                           
  1441                           ;Config register IDLOC2 @ 0x200004
  1442                           ;	unspecified, using default values
  1443   200004                     	org	2097156
  1444   200004  FFFF               	dw	65535
  1445                           
  1446                           ;Config register IDLOC3 @ 0x200006
  1447                           ;	unspecified, using default values
  1448   200006                     	org	2097158
  1449   200006  FFFF               	dw	65535
  1450                           
  1451                           ;Config register IDLOC4 @ 0x200008
  1452                           ;	unspecified, using default values
  1453   200008                     	org	2097160
  1454   200008  FFFF               	dw	65535
  1455                           
  1456                           ;Config register IDLOC5 @ 0x20000A
  1457                           ;	unspecified, using default values
  1458   20000A                     	org	2097162
  1459   20000A  FFFF               	dw	65535
  1460                           
  1461                           ;Config register IDLOC6 @ 0x20000C
  1462                           ;	unspecified, using default values
  1463   20000C                     	org	2097164
  1464   20000C  FFFF               	dw	65535
  1465                           
  1466                           ;Config register IDLOC7 @ 0x20000E
  1467                           ;	unspecified, using default values
  1468   20000E                     	org	2097166
  1469   20000E  FFFF               	dw	65535
  1470                           
  1471                           	psect	config
  1472                           
  1473                           ;Config register CONFIG1L @ 0x300000
  1474                           ;	External Oscillator mode Selection bits
  1475                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1476                           ;	Power-up default value for COSC bits
  1477                           ;	RSTOSC = EXTOSC, EXTOSC operating per FEXTOSC bits (device manufacturing default)
  1478   300000                     	org	3145728
  1479   300000  FA                 	db	250
  1480                           
  1481                           ;Config register CONFIG1H @ 0x300001
  1482                           ;	Clock Out Enable bit
  1483                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  1484                           ;	Clock Switch Enable bit
  1485                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  1486                           ;	Fail-Safe Clock Monitor Enable bit
  1487                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  1488   300001                     	org	3145729
  1489   300001  FF                 	db	255
  1490                           
  1491                           ;Config register CONFIG2L @ 0x300002
  1492                           ;	Master Clear Enable bit
  1493                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  1494                           ;	Power-up Timer Enable bit
  1495                           ;	PWRTE = OFF, Power up timer disabled
  1496                           ;	Low-power BOR enable bit
  1497                           ;	LPBOREN = OFF, ULPBOR disabled
  1498                           ;	Brown-out Reset Enable bits
  1499                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  1500   300002                     	org	3145730
  1501   300002  FF                 	db	255
  1502                           
  1503                           ;Config register CONFIG2H @ 0x300003
  1504                           ;	Brown Out Reset Voltage selection bits
  1505                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  1506                           ;	ZCD Disable bit
  1507                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  1508                           ;	PPSLOCK bit One-Way Set Enable bit
  1509                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
  1510                           ;	Stack Full/Underflow Reset Enable bit
  1511                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1512                           ;	Debugger Enable bit
  1513                           ;	DEBUG = OFF, Background debugger disabled
  1514                           ;	Extended Instruction Set Enable bit
  1515                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  1516   300003                     	org	3145731
  1517   300003  FF                 	db	255
  1518                           
  1519                           ;Config register CONFIG3L @ 0x300004
  1520                           ;	WDT Period Select bits
  1521                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  1522                           ;	WDT operating mode
  1523                           ;	WDTE = OFF, WDT Disabled
  1524   300004                     	org	3145732
  1525   300004  9F                 	db	159
  1526                           
  1527                           ;Config register CONFIG3H @ 0x300005
  1528                           ;	WDT Window Select bits
  1529                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  1530                           ;	WDT input clock selector
  1531                           ;	WDTCCS = SC, Software Control
  1532   300005                     	org	3145733
  1533   300005  FF                 	db	255
  1534                           
  1535                           ;Config register CONFIG4L @ 0x300006
  1536                           ;	unspecified, using default values
  1537                           ;	Write Protection Block 0
  1538                           ;	WRT0 = 0x1, unprogrammed default
  1539                           ;	Write Protection Block 1
  1540                           ;	WRT1 = 0x1, unprogrammed default
  1541                           ;	Write Protection Block 2
  1542                           ;	WRT2 = 0x1, unprogrammed default
  1543                           ;	Write Protection Block 3
  1544                           ;	WRT3 = 0x1, unprogrammed default
  1545                           ;	Write Protection Block 3
  1546                           ;	WRT4 = 0x1, unprogrammed default
  1547                           ;	Write Protection Block 3
  1548                           ;	WRT5 = 0x1, unprogrammed default
  1549                           ;	Write Protection Block 3
  1550                           ;	WRT6 = 0x1, unprogrammed default
  1551                           ;	Write Protection Block 3
  1552                           ;	WRT7 = 0x1, unprogrammed default
  1553   300006                     	org	3145734
  1554   300006  FF                 	db	255
  1555                           
  1556                           ;Config register CONFIG4H @ 0x300007
  1557                           ;	Configuration Register Write Protection bit
  1558                           ;	WRTC = 0x1, unprogrammed default
  1559                           ;	Boot Block Write Protection bit
  1560                           ;	WRTB = 0x1, unprogrammed default
  1561                           ;	Data EEPROM Write Protection bit
  1562                           ;	WRTD = 0x1, unprogrammed default
  1563                           ;	Scanner Enable bit
  1564                           ;	SCANE = 0x1, unprogrammed default
  1565                           ;	Low Voltage Programming Enable bit
  1566                           ;	LVP = OFF, HV on MCLR/VPP must be used for programming
  1567   300007                     	org	3145735
  1568   300007  DF                 	db	223
  1569                           
  1570                           ;Config register CONFIG5L @ 0x300008
  1571                           ;	unspecified, using default values
  1572                           ;	UserNVM Program Memory Code Protection bit
  1573                           ;	CP = 0x1, unprogrammed default
  1574                           ;	DataNVM Memory Code Protection bit
  1575                           ;	CPD = 0x1, unprogrammed default
  1576   300008                     	org	3145736
  1577   300008  FF                 	db	255
  1578                           
  1579                           ;Config register CONFIG5H @ 0x300009
  1580                           ;	unspecified, using default values
  1581   300009                     	org	3145737
  1582   300009  FF                 	db	255
  1583                           
  1584                           ;Config register CONFIG6L @ 0x30000A
  1585                           ;	unspecified, using default values
  1586                           ;	Table Read Protection Block 0
  1587                           ;	EBTR0 = 0x1, unprogrammed default
  1588                           ;	Table Read Protection Block 1
  1589                           ;	EBTR1 = 0x1, unprogrammed default
  1590                           ;	Table Read Protection Block 2
  1591                           ;	EBTR2 = 0x1, unprogrammed default
  1592                           ;	Table Read Protection Block 3
  1593                           ;	EBTR3 = 0x1, unprogrammed default
  1594                           ;	Table Read Protection Block 4
  1595                           ;	EBTR4 = 0x1, unprogrammed default
  1596                           ;	Table Read Protection Block 5
  1597                           ;	EBTR5 = 0x1, unprogrammed default
  1598                           ;	Table Read Protection Block 6
  1599                           ;	EBTR6 = 0x1, unprogrammed default
  1600                           ;	Table Read Protection Block 7
  1601                           ;	EBTR7 = 0x1, unprogrammed default
  1602   30000A                     	org	3145738
  1603   30000A  FF                 	db	255
  1604                           
  1605                           ;Config register CONFIG6H @ 0x30000B
  1606                           ;	unspecified, using default values
  1607                           ;	Boot Block Table Read Protection bit
  1608                           ;	EBTRB = 0x1, unprogrammed default
  1609   30000B                     	org	3145739
  1610   30000B  FF                 	db	255
  1611                           tosu	equ	0xFFF
  1612                           tosh	equ	0xFFE
  1613                           tosl	equ	0xFFD
  1614                           stkptr	equ	0xFFC
  1615                           pclatu	equ	0xFFB
  1616                           pclath	equ	0xFFA
  1617                           pcl	equ	0xFF9
  1618                           tblptru	equ	0xFF8
  1619                           tblptrh	equ	0xFF7
  1620                           tblptrl	equ	0xFF6
  1621                           tablat	equ	0xFF5
  1622                           prodh	equ	0xFF4
  1623                           prodl	equ	0xFF3
  1624                           indf0	equ	0xFEF
  1625                           postinc0	equ	0xFEE
  1626                           postdec0	equ	0xFED
  1627                           preinc0	equ	0xFEC
  1628                           plusw0	equ	0xFEB
  1629                           fsr0h	equ	0xFEA
  1630                           fsr0l	equ	0xFE9
  1631                           wreg	equ	0xFE8
  1632                           indf1	equ	0xFE7
  1633                           postinc1	equ	0xFE6
  1634                           postdec1	equ	0xFE5
  1635                           preinc1	equ	0xFE4
  1636                           plusw1	equ	0xFE3
  1637                           fsr1h	equ	0xFE2
  1638                           fsr1l	equ	0xFE1
  1639                           bsr	equ	0xFE0
  1640                           indf2	equ	0xFDF
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           preinc2	equ	0xFDC
  1644                           plusw2	equ	0xFDB
  1645                           fsr2h	equ	0xFDA
  1646                           fsr2l	equ	0xFD9
  1647                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     48      82
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    showTime@time	PTR short  size(1) Largest target is 8
		 -> main@nums(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_getKey

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0     504
                                             26 COMRAM    22    22      0
                             _getKey
                           _showTime
 ---------------------------------------------------------------------------------
 (1) _showTime                                             7     6      1     137
                                              0 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 (1) _getKey                                              26    26      0     180
                                              0 COMRAM    26    26      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _getKey
   _showTime

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3719      0       0      0.0%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBANK14          136      0       0      0.0%
BANK14             136      0       0      0.0%
BITBIGSFRlll       132      0       0      0.0%
BITBIGSFRllh       113      0       0      0.0%
BITBIGSFRh         113      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95     48      82     86.3%
BITBIGSFRlh         10      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      82      0.0%


Microchip Technology PIC18 Macro Assembler V3.10 build 20250813170317 
Symbol Table                                                                                   Wed Oct  8 15:08:02 2025

                      _i 0041                       l44 1184                       l61 1046  
                     u11 1060                       u30 10A4                       u31 10A0  
                     u40 10D4                       u24 108A                       u41 10D0  
                     u25 1086                       u50 10E4                       u51 10E0  
                     u80 1142                       u64 1104                       u81 113E  
                     u65 1100                       u90 116E                       u74 1128  
                     u91 116A                       u75 1124                      l860 1048  
                    l870 106C                      l862 104A                      l872 1074  
                    l880 10B8                      l864 1054                      l890 114E  
                    l882 10D4                      l874 10A4                      l866 1056  
                    l892 1152                      l884 10E4                      l876 10AC  
                    l868 1068                      l894 116E                      l886 10EE  
                    l878 10B4                      l888 1142                      l898 1182  
                    u200 1046                      u201 1042                      u211 119A  
                    u221 11A6                      u230 11E2                      u231 11DE  
                    u240 11F2                      u241 11EE                      u250 1204  
                    u251 1200                      u180 0F24                      u181 0F20  
                    u194 0F4E                      u195 0F4A                      u267 1238  
                    u277 101E                      wreg 0FE8                     l1010 0F28  
                   l1020 0F74                     l1012 0F3C                     l1004 0F02  
                   l1030 0F9C                     l1022 0F7C                     l1014 0F5C  
                   l1006 0F08                     l1040 1026                     l1032 0FA4  
                   l1024 0F84                     l1016 0F64                     l1106 0FC2  
                   l1026 0F8C                     l1018 0F6C                     l1050 11A0  
                   l1028 0F94                     l1036 0FAC                     l1060 11B6  
                   l1052 11AC                     l1038 1018                     l1070 11CC  
                   l1062 11BC                     l1054 11B0                     l1046 1186  
                   l1080 1226                     l1072 11D2                     l1064 11BE  
                   l1056 11B2                     l1048 1194                     l1074 11E2  
                   l1082 122A                     l1066 11C0                     l1058 11B4  
                   l1084 1232                     l1076 11F2                     l1068 11CA  
                   l1078 1204                     _LATA 0F83                     _LATB 0F84  
                   _LATC 0F85                     _LATD 0F86                     _main 1186  
                   fsr2h 0FDA                     indf2 0FDF                     fsr1l 0FE1  
                   fsr2l 0FD9                     prodl 0FF3                     start FFFC  
           ___param_bank 0000                    ?_main 0001                    _PORTB 0F8E  
           main@last_key 002F                    _TRISA 0F88                    _TRISB 0F89  
                  _TRISC 0F8A                    _TRISD 0F8B             main@old_nums 001D  
                  main@i 002D                    tablat 0FF5                    plusw1 0FE3  
                  plusw2 0FDB                    status 0FD8          __initialization 1248  
           __end_of_main 1248                   ??_main 001B            __activetblptr 0003  
                 _ANSELA 0F11                   _ANSELB 0F19                   _ANSELC 0F21  
                 _ANSELD 0F26                   _getKey 1048                   clear_0 126E  
                 isa$std 0001             __pdataCOMRAM 0043         __end_of_showTime 1048  
           __mediumconst 0F00                   tblptrh 0FF7                   tblptrl 0FF6  
                 tblptru 0FF8               __accesstop 0060  __end_of__initialization 1274  
          ___rparam_used 0001           __pcstackCOMRAM 0001                  ?_getKey 0001  
                __Hparam 0000                  __Lparam 0000                ?_showTime 0001  
           __psmallconst 0F00                  __pcinit 1248                  __ramtop 0F00  
                __ptext0 1186                  __ptext1 0F02                  __ptext2 1048  
                main@key 0030     end_of_initialization 1274               getKey@keys 0003  
             ??_showTime 0002                  postdec1 0FE5                  postdec2 0FDD  
                postinc0 0FEE                  postinc2 0FDE               main@F10320 0031  
             main@F10318 0039              showTime@num 0004            __pidataCOMRAM 127A  
         __end_of_getKey 1186      start_initialization 1248                 ??_getKey 0001  
            __pbssCOMRAM 0031              __smallconst 0F00            getKey@pressed 0016  
              getKey@col 0013                getKey@idx 0019                getKey@key 0015  
              getKey@row 0017                copy_data0 125C                 __Hrparam 0000  
               __Lrparam 0000             getKey@F10302 0043                 isa$xinst 0000  
               _showTime 0F02                showTime@j 0006                 main@nums 0025  
           showTime@time 0001  
